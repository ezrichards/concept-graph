notional_machines = {
    "VariableTraceTable": {
        "title": "Variable Trace Table",
        "author": "craig",
        "ProgrammingLanguage": "any",
        "ProgrammingParadigm": "imperative",
        "ConceptualAdvantage": "Shows how variables are updated with assignments.",
        "Form": "Representation",
        "DrawsAttentionTo": "Variable values and their assignment.",
        "UseWhen": "To demonstrate what happens when a variable is assigned another value. Helpful for demonstrating how to effectively swap values between two variables.",
        "Cost": "Requires that the instructor explains that only the bottom value is stored in the variable.",
        "OriginSource": "Interview, Steve Jost",
        "image": "VariableTraceTable.jpg",
        "Mapping:": "VariableTraceTable.jpg",
        "variable": "table heading",
        "value": "last element listed in the column",
        "Topic": "Variables",
    },
    "StackAndHeapDiagram-3": {
        "title": "Stack and Heap Diagram (3 - References)",
        "sequence": "Stack and Heap Diagram",
        "Step": "3",
        "StepTitle": "References",
        "author": "matthias",
        "ProgrammingLanguage": "Java",
        "ProgrammingParadigm": "imperative, OO",
        "ConceptualAdvantage": "Makes explicit the notion of a reference, which refers to a specific object, and the notion of a null value as a reference that does not point anywhere.",
        "Form": "Representation",
        "DrawsAttentionTo": "References.",
        "UseWhen": "Introducing the concept of references (pointers), and aliasing (multiple references pointing to the same object).",
        "Cost": "Straightforward; just draw an arrow.",
        "OriginSource": "Own practice",
        "image": "StackAndHeapDiagram-3.png",
        "Mapping:": "StackAndHeapDiagram-3.png",
        "...": "(all aspects of 1 - Objects and 2 - Stack Frames)",
        "reference value": "arrow from a variable rectangle (anywhere, i.e., in the stack or the heap) to an object rounded rectangle",
        "null value": "a ground symbol (i.e., the absence of an arrow)",
        "Topic": "Memory",
        "": "A Java-based Classroom Response System for Teaching Java",
        "We use this notional machine in instruction as well as assessments": "Memory",
        "(e.g., clicker questions, mastery checks, exams).": "Memory",
        "For instruction, the instructor draws the representation.": "Memory",
        "For assessment, the student draws the representation.": "Memory",
        "The *name* of this notional machine is inspired by two of the three regions that make up the memory of the runtime environment of imperative programming languages:": "Memory",
        "* Stack": "where stack frames are allocated that hold local variables and parameters of functions/procedures/methods",
        "* Heap": "where dynamically allocated memory (e.g., objects and arrays in Java) is located",
        "The third area, globals, could be added to the diagram, but it is less important when using an object-oriented style where static members are less prevalent.": "where dynamically allocated memory (e.g., objects and arrays in Java) is located",
        "* Globals": "where global variables (e.g., static fields in Java) are located",
        "While we primarily use this notional machine for Java, it could easily be adapted for other imperative object-oriented programming languages, such as C# or Python.": "where global variables (e.g., static fields in Java) are located",
        "<h3 class=ui header>Notation</h3>": "where global variables (e.g., static fields in Java) are located",
        "<h4 class=ui header>Objects, Stack Frames, and References</h4>": "where global variables (e.g., static fields in Java) are located",
        "<img src=/assets/images/nm/StackAndHeapDiagram.png class=ui bordered image>": "where global variables (e.g., static fields in Java) are located",
        "<h4 class=ui header>Arrays</h4>": "where global variables (e.g., static fields in Java) are located",
        "<img src=/assets/images/nm/StackAndHeapDiagram-Arrays.png class=ui bordered image>": "where global variables (e.g., static fields in Java) are located",
        "<h4 class=ui header>Origins of Notation</h4>": "where global variables (e.g., static fields in Java) are located",
        "The *notation* for this notional machine is based on how the [BlueJ IDE](https://bluej.org/) represents objects, with a few differences:": "where global variables (e.g., static fields in Java) are located",
        "* BlueJ only shows objects, we also show stack frames (as rectangles)": "where global variables (e.g., static fields in Java) are located",
        "* Unlike BlueJ, we show references as arrows": "where global variables (e.g., static fields in Java) are located",
        "* Unlike BlueJ, we refrain from associating names with objects,": "where global variables (e.g., static fields in Java) are located",
        "to avoid the [ObjectsMustBeNamed](https://progmiscon.org/misconceptions/Java/ObjectsMustBeNamed/) misconception.": "where global variables (e.g., static fields in Java) are located",
        "* We represent fields (and variables in general) as rectangles,": "where global variables (e.g., static fields in Java) are located",
        "but we place the type of the variable **above** the rectangle, the name of the variable on the left, and the value inside, and we **do not show access modifiers** (private, protected, public).": "where global variables (e.g., static fields in Java) are located",
        "* We draw a **bold** rectangle outline for `final` variables.": "where global variables (e.g., static fields in Java) are located",
        "<img src=/assets/images/nm/StackAndHeapDiagram-BlueJ-Object.png class=ui medium image>": "where global variables (e.g., static fields in Java) are located",
        "<h3 class=ui header>Stack &amp; Heap Diagrams in Informa Clicker</h3>": "where global variables (e.g., static fields in Java) are located",
        "The [Informa Clicker](http://sape.inf.usi.ch/informa) tool, a software-based classroom response system, provides a question type with an integrated editor": "where global variables (e.g., static fields in Java) are located",
        "for stack and heap diagrams.": "where global variables (e.g., static fields in Java) are located",
        "{% include paper.html": "where global variables (e.g., static fields in Java) are located",
        "authors=Matthias Hauswirth and Andrea Adamoli": "where global variables (e.g., static fields in Java) are located",
        "url=https://dl.acm.org/doi/10.1145/1596655.1596657": "where global variables (e.g., static fields in Java) are located",
        "title=Solve & Evaluate with Informa": "A Java-based Classroom Response System for Teaching Java",
        "publication=PPPJ '09 %}": "A Java-based Classroom Response System for Teaching Java",
        "<h4 class=ui header>Constructor Calls</h4>": "A Java-based Classroom Response System for Teaching Java",
        "<iframe width=560 height=315 src=https://www.youtube-nocookie.com/embed/Hpg4fBTCYuA title=YouTube video player frameborder=0 allow=accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture allowfullscreen></iframe>": "A Java-based Classroom Response System for Teaching Java",
        "<h4 class=ui header>Local Variables</h4>": "A Java-based Classroom Response System for Teaching Java",
        "<iframe width=560 height=315 src=https://www.youtube-nocookie.com/embed/GXqU1QEdC58 title=YouTube video player frameborder=0 allow=accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture allowfullscreen></iframe>": "A Java-based Classroom Response System for Teaching Java",
        "<h4 class=ui header>Method Calls</h4>": "A Java-based Classroom Response System for Teaching Java",
        "<iframe width=560 height=315 src=https://www.youtube-nocookie.com/embed/OGsd8A9tCn0 title=YouTube video player frameborder=0 allow=accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture allowfullscreen></iframe>": "A Java-based Classroom Response System for Teaching Java",
        "<h3 class=ui header>Web-Based Stack &amp; Heap Diagram Editor</h3>": "A Java-based Classroom Response System for Teaching Java",
        "Davide Ciulla developed a prototype of a [web based stack and heap diagram editor](https://stackandheap.netlify.app/):": "A Java-based Classroom Response System for Teaching Java",
        "<iframe src=https://stackandheap.netlify.app/ width=100% height=600>": "A Java-based Classroom Response System for Teaching Java",
        "</iframe>": "A Java-based Classroom Response System for Teaching Java",
    },
    "PhysicalJava-5-PaperListListNode": {
        "title": "Physical Java (5. Paper List/ListNode)",
        "sequence": "Physical Java",
        "Step": "5",
        "StepTitle": "Paper List/ListNode",
        "author": "colleen",
        "ProgrammingLanguage": "Java",
        "ProgrammingParadigm": "imperative",
        "ConceptualAdvantage": "Helps students plan code; avoids confusion of crossed out arrows.",
        "Form": "Representation",
        "DrawsAttentionTo": "The effect of resetting references.",
        "UseWhen": "When having students implement a LinkedList in Java.",
        "Cost": "A pain to cut out all the papers. No increase in class time needed.",
        "OriginSource": "Own practice",
        "image": "PhysicalJava-5.jpg",
        "Mapping:": "PhysicalJava-5.jpg",
        "...": "(all aspects of Physical Java 4)",
        "local variable": "free floating variable",
        "stack frame": "(not represented)",
        "Topic": "Memory",
    },
    "LogicOperationAsDominoGate": {
        "title": "Logic Operation as Domino Gate",
        "author": "matthias",
        "ProgrammingLanguage": "any",
        "ProgrammingParadigm": "any",
        "ConceptualAdvantage": "See inside logic gates/operations. Construct/invent them from atomic components, and observe/analyze their full workings.",
        "Form": "Analogy",
        "DrawsAttentionTo": "The inner workings of a Boolean logic operation (and, or, xor).",
        "UseWhen": "To learn about Boolean logic operations (and, or, xor, ...).",
        "Cost": "Need domino pieces. Introduces an alternative real machine (e.g., implementation of domino AND is not exactly the same as implementation of electronic circuit AND). Mechanical inaccuracies can cause problems.",
        "OriginSource": "Own practice, based on Matt Parker's 'domino computer'",
        "image": "LogicOperationAsDominoGate.jpg",
        "Mapping:": "LogicOperationAsDominoGate.jpg",
        "Boolean value": "domino piece (standing, or fallen)",
        "or operation": "two joining lines of dominos",
        "xor operation": "two lines of dominos like in left image",
        "and operation": "two lines of dominos like in right image",
        "function argument": "first domino piece in a line",
        "function return value": "last domino piece in a line",
        "Topic": "Logic",
        "": "Logic",
        "The idea is described under the name Domino Circuit,": "Logic",
        "one of three different programming languages that strive to eliminate abstraction, in the following paper:": "Logic",
        "{% include paper.html": "Logic",
        "authors=Matthias Hauswirth, Andrea Adamoli, and Mohammad Azadmanesh": "Logic",
        "url=https://dl.acm.org/doi/10.1145/3141880.3141894": "Logic",
        "title=The Program is the System": "Logic",
        "publication=Koli Calling '17 %}": "Logic",
        "This notional machine was used to explain logic operations to high school students and the general public in the 10-year anniversary exhibition": "Logic",
        "of the Faculty of Informatics of USI.": "Logic",
        "Additionally, at the end of each exhibition day,": "Logic",
        "a four-bit full-adder built entirely from domino pieces was": "Logic",
        "used to add two numbers picked by the students:": "Logic",
        "<iframe width=560 height=315 src=https://www.youtube-nocookie.com/embed/EEcU0xhwvZI title=YouTube video player frameborder=0 allow=accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture allowfullscreen></iframe>": "Logic",
        "The original idea of a Domino Computer&mdash;and [a fantastic set of related resources](http://think-maths.co.uk/downloads/domino-computer-worksheets)&mdash; comes from stand-up mathematician Matt Parker.": "Logic",
    },
    "CallStackAsDiagram": {
        "title": "Call Stack as Diagram",
        "author": "craig",
        "ProgrammingLanguage": "any",
        "ProgrammingParadigm": "imperative",
        "ConceptualAdvantage": "Distinguishes between variable values in the main function and the parameters and local variables in a called function.",
        "DrawsAttentionTo": "Each function call/frame has its own set of stored values.",
        "Form": "Representation",
        "UseWhen": "To demonstrate what happens to variable values when they are passed to a function..",
        "Cost": "Requires that the instructor writes out variable boxes for each function call.",
        "OriginSource": "Interview, John Rogers",
        "image": "CallStackAsDiagram.jpg",
        "Mapping:": "CallStackAsDiagram.jpg",
        "local variable": "box with label at bottom of a frame labeled with function name",
        "parameter": "box with label at the top of a frame labeled with function name",
        "variable in main": "box with label in a frame called main",
        "Topic": "Functions",
    },
    "PythonComputer_2.html": {
        "title": "Python Computer (V2 - Intermediate)",
        "sequence": "Python Computer",
        "Step": "2",
        "StepTitle": "Intermediate",
        "author": "andreas",
        "ProgrammingLanguage": "Python",
        "ProgrammingParadigm": "imperative",
        "ConceptualAdvantage": "Expandable 'offline' model of program execution. In its intermediate stage (V2) it covers everything of V1 plus definition and execution of sub-routines (functions) of Python scripts.",
        "Form": "Representation",
        "DrawsAttentionTo": "Scoping (global vs. local variables) and sub-routines with parameters and return values.",
        "UseWhen": "At the beginning of a typical 'walk through' of the different programming constructs, as it can then 'grow' with each new construct.",
        "Cost": "Time consuming to prepare. Easy to follow for learners, as it grows in complexity. Can be used for exercises (fill out sheets of the computer).",
        "OriginSource": "Own practice",
        "image": "PythonComputer_2.png",
        "Mapping:": "PythonComputer_2.png",
        "...": "...",
        "method table": "table of identifier and starting line",
        "scope": "'sub-table' area in the memory",
        "parameter": "entry in the memory sub-table of a function call",
        "Topic": "Other",
        "": "Other",
        "<p>": "Other",
        "The idea is to offer an offline (in the sense of not automated) visualization of program execution. The necessary model of the computer executing the program gets increasingly more complex, as more programming constructs are introduced.": "Other",
        "Similar ways of stepping through code can be found in the typical visualization (or debugging) tools and this connection between offline and online is intentional.": "Other",
        "</p>": "It becomes cumbersome for more than very simple scripts to create and once finished, modifications to a program are time consuming.",
        "In its basic form, the executor can run a script sequentially and jump in the script based on the evaluation of a conditional. Variables of primitive types (i.e. str, int, float, bool) are stored in a memory table that consists of identifier and current value.": "Other",
        "A template for all stages can be found <a href=https://notionalmachines.github.io/assets/misc/nm/Python Computer Template.pptx>here</a>": "Other",
        "An example for the execution of a simple script in German can be found <a href=https://notionalmachines.github.io/assets/misc/nm/PythonComputer_1_Example.pdf>here</a> (Speicher = Memory, Bezeichner = Identifier, Wert = Value, Bedingung = Condition, Nächste Zeile = Next Line).": "Other",
        "It also shows the big drawback of having it as slides only": "It becomes cumbersome for more than very simple scripts to create and once finished, modifications to a program are time consuming.",
        "The advantage is that, once introduced, it is not necessary to always step through a program from the beginning, a slide can also jump right into the middle of an execution to highlight interesting phenomena.": "It becomes cumbersome for more than very simple scripts to create and once finished, modifications to a program are time consuming.",
        "As it is manual and on slides, it is also easy to add boxes or other elements to guide students' attention to some aspect.": "It becomes cumbersome for more than very simple scripts to create and once finished, modifications to a program are time consuming.",
        "Also, the template can be used in exercises and assessments and students can fill in various aspects of the NM (e.g. the memory after a program has been run).": "It becomes cumbersome for more than very simple scripts to create and once finished, modifications to a program are time consuming.",
    },
    "PythonComputer_3.html": {
        "title": "Python Computer (V3 - Advanced)",
        "sequence": "Python Computer",
        "Step": "3",
        "StepTitle": "Advanced",
        "author": "andreas",
        "ProgrammingLanguage": "Python",
        "ProgrammingParadigm": "imperative",
        "ConceptualAdvantage": "Expandable 'offline' model of program execution. In its advanced stage (V3) it covers everything of V1 and V2 plus lists and references.",
        "Form": "Representation",
        "DrawsAttentionTo": "Object types and references.",
        "UseWhen": "Introducing references.",
        "Cost": "Time consuming to prepare. Easy to follow for learners, as it grows in complexity. Can be used for exercises (fill out sheets of the computer).",
        "OriginSource": "Own practice",
        "image": "PythonComputer_3.png",
        "Mapping:": "PythonComputer_3.png",
        "...": "...",
        "heap": "object table of address and value",
        "reference": "addresss used as a value (denoted in <...>)",
        "object": "entry in object table with address and value",
        "Topic": "Other",
        "": "Other",
        "<p>": "Other",
        "The idea is to offer an offline (in the sense of not automated) visualization of program execution. The necessary model of the computer executing the program gets increasingly more complex, as more programming constructs are introduced.": "Other",
        "Similar ways of stepping through code can be found in the typical visualization (or debugging) tools and this connection between offline and online is intentional.": "Other",
        "</p>": "It becomes cumbersome for more than very simple scripts to create and once finished, modifications to a program are time consuming.",
        "In its basic form, the executor can run a script sequentially and jump in the script based on the evaluation of a conditional. Variables of primitive types (i.e. str, int, float, bool) are stored in a memory table that consists of identifier and current value.": "Other",
        "A template for all stages can be found <a href=https://notionalmachines.github.io/assets/misc/nm/Python Computer Template.pptx>here</a>": "Other",
        "An example for the execution of a simple script in German can be found <a href=https://notionalmachines.github.io/assets/misc/nm/PythonComputer_1_Example.pdf>here</a> (Speicher = Memory, Bezeichner = Identifier, Wert = Value, Bedingung = Condition, Nächste Zeile = Next Line).": "Other",
        "It also shows the big drawback of having it as slides only": "It becomes cumbersome for more than very simple scripts to create and once finished, modifications to a program are time consuming.",
        "The advantage is that, once introduced, it is not necessary to always step through a program from the beginning, a slide can also jump right into the middle of an execution to highlight interesting phenomena.": "It becomes cumbersome for more than very simple scripts to create and once finished, modifications to a program are time consuming.",
        "As it is manual and on slides, it is also easy to add boxes or other elements to guide students' attention to some aspect.": "It becomes cumbersome for more than very simple scripts to create and once finished, modifications to a program are time consuming.",
        "Also, the template can be used in exercises and assessments and students can fill in various aspects of the NM (e.g. the memory after a program has been run).": "It becomes cumbersome for more than very simple scripts to create and once finished, modifications to a program are time consuming.",
    },
    "ProgramStateAsGraph": {
        "title": "Program State as Graph",
        "author": "craig",
        "ProgrammingLanguage": "Java",
        "ProgrammingParadigm": "object-oriented",
        "ConceptualAdvantage": "Graphs make the relevant parts of program state explicit and support detailed explanations by instructor.",
        "Form": "Representation",
        "DrawsAttentionTo": "Program state, and especially variables and references.",
        "UseWhen": "To demonstrate how Java code advances through a computation, e.g., when working data structures.",
        "Cost": "Quick and easy to use, even when live-coding a solution",
        "OriginSource": "Interview, James Riely",
        "image": "ProgramStateAsGraph.jpg",
        "Mapping:": "ProgramStateAsGraph.jpg",
        "stack frame": "red rectangle, with method name and line number in left compartment, boxes for paremeters and local variables in right compartment",
        "object": "purple rectangle, with class name in left compartment, boxes for instance variables in right compartment",
        "array": "blue rectangle consisting of boxes for elements",
        "static fields": "yellow rectangle, with class name in left compartment, boxes for class variables in right compartment",
        "variable": "box inside a rectangle",
        "reference value": "solid arrow pointing to a rectangle",
        "primitive value": "value written inside a box",
        "callee-caller relationship": "dashed red arrow from callee stack frame to caller stack frame",
        "Topic": "State",
        "": "State",
        "James Riely [developed and described a tool](https://fpl.cs.depaul.edu/jriely/visualization/), in the form of a Java class, [Trace.java](https://fpl.cs.depaul.edu/jriely/visualization/Trace.java), that produces graph representations of the Java program state in the form of GraphViz dot graphs.": "State",
        "<iframe width=560 height=315 src=https://www.youtube-nocookie.com/embed/B2ucxRf8Lq0 title=YouTube video player frameborder=0 allow=accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture allowfullscreen></iframe>": "State",
        "### Example Usage": "State",
        "He uses it in his [CSC300](http://fpl.cs.depaul.edu/jriely/ds1/index.html) course at DePaul University. Here is one of the lecture videos,": "State",
        "showing the traversal of linked lists.": "State",
        "<iframe width=560 height=315 src=https://www.youtube-nocookie.com/embed/arIFfd2v6m8 title=YouTube video player frameborder=0 allow=accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture allowfullscreen></iframe>": "State",
    },
    "ProcessorAsFileClerk": {
        "title": "Processor as File Clerk",
        "author": "matthias",
        "ProgrammingLanguage": "any",
        "ProgrammingParadigm": "imperative",
        "ConceptualAdvantage": "Makes explicit the difference between data and instructions, shows how little a single instruction really can achieve. Can be stretched to explain all kinds of concepts (although eventually becomes a bit of a stretch).",
        "Form": "Analogy",
        "DrawsAttentionTo": "Data an instruction operates on, 'mechanistic' workings of instructions.",
        "UseWhen": "When introducing assembly programming (or low-level imperative programming), mostly at the beginning.",
        "Cost": "Requires an understanding of files / file clerks.",
        "OriginSource": "Interview, Antonio Carzaniga",
        "image": "ProcessorAsFileClerk.jpg",
        "Mapping:": "ProcessorAsFileClerk.jpg",
        "processor": "file clerk",
        "instruction": "action taken by file clerk (e.g., read info off a card)",
        "Topic": "Other",
        "": "Other",
        "Antonio Carzaniga pointed out that Richard Feynman used this notional machine.": "Other",
        "For a detailed discussion, see Matthias Hauswirth's blog post on": "Other",
        "[Richard Feynman's Notional Machine](https://medium.com/luceresearchlab/richard-feynmans-notional-machine-e39ecc9d992a), with a video of Feynman and a reference to Feynman's lecture notes.": "Other",
    },
    "VariableAsPigeonhole": {
        "title": "Variable as Pigeonhole",
        "author": "matthias",
        "ProgrammingLanguage": "BASIC",
        "ProgrammingParadigm": "imperative",
        "ConceptualAdvantage": "Makes variable tangible, gives impression of memory as a bunch of variables",
        "Form": "Analogy",
        "DrawsAttentionTo": "Variables contain values",
        "UseWhen": "When introducing memory/information, in the form of variables in BASIC",
        "Cost:": "When introducing memory/information, in the form of variables in BASIC",
        "OriginSource": "Textbook 'Introduction to Computer Programming",
        "image": "VariableAsPigeonhole.jpg",
        "Mapping:": "VariableAsPigeonhole.jpg",
        "variable": "pigeon hole in shelf",
        "variable name": "label attached to the pigeon hole",
        "value": "note inside the pigeon hole",
        "Topic": "Variables",
        "": "Variables",
        "Used by Usborne's [Introduction to Computer Programming": "Basic](https://drive.google.com/file/d/0Bxv0SsvibDMTUXdYTnRaTy1LLVE/view).",
        "We found this thanks to a [Twitter thread on analogies for variables](https://twitter.com/ItsAll_Geek2Me/status/1271380040043954176).": "Basic](https://drive.google.com/file/d/0Bxv0SsvibDMTUXdYTnRaTy1LLVE/view).",
    },
    "VariableAsBox": {
        "title": "Variable as Box",
        "author": "felienne",
        "ProgrammingLanguage": "any",
        "ProgrammingParadigm": "imperative",
        "ConceptualAdvantage": "Makes variable tangible, embodied activity",
        "Form": "Analogy",
        "DrawsAttentionTo": "Variables, access, initialization",
        "UseWhen": "When the concept of variables is still unclear",
        "Cost": "Might include multiple values hypothesis",
        "OriginSource": "Own practice.",
        "image": "VariableAsBox.png",
        "Mapping:": "VariableAsBox.png",
        "Variable": "Box",
        "access": "opening box, accessing topmost post-it",
        "rename variable": "new name on box",
        "assign (list)": "new name also on box",
        "assign simple value": "second box with same post-it",
        "Topic": "Variables",
    },
    "StackAndHeapDiagram-2": {
        "title": "Stack and Heap Diagram (2 - Stack Frames)",
        "sequence": "Stack and Heap Diagram",
        "Step": "2",
        "StepTitle": "Stack Frames",
        "author": "matthias",
        "ProgrammingLanguage": "Java",
        "ProgrammingParadigm": "imperative, OO",
        "ConceptualAdvantage": "Makes explicit the notion of a stack frame (activation record), that groups together all the temporary variables needed during a method execution.",
        "Form": "Representation",
        "DrawsAttentionTo": "A method's state (variables that have a lifetime as long as the execution of the method).",
        "UseWhen": "Introducing the concept of methods, and method calls.",
        "Cost": "Straightforward; just draw a rectangle around some variables.",
        "OriginSource": "Own practice",
        "image": "StackAndHeapDiagram-2.png",
        "Mapping:": "StackAndHeapDiagram-2.png",
        "stack": "one side of the drawing (labeled stack), containing zero or more stacked 'stack frame' rectangles",
        "stack frame": "grey rectangle, with method name, containing local variables and parameters of the method",
        "local variable": "box inside stack frame, with name, type, value",
        "parameter": "box inside stack frame, with name, type, value",
        "Topic": "Stack",
        "": "A Java-based Classroom Response System for Teaching Java",
        "We use this notional machine in instruction as well as assessments": "Stack",
        "(e.g., clicker questions, mastery checks, exams).": "Stack",
        "For instruction, the instructor draws the representation.": "Stack",
        "For assessment, the student draws the representation.": "Stack",
        "The *name* of this notional machine is inspired by two of the three regions that make up the memory of the runtime environment of imperative programming languages:": "Stack",
        "* Stack": "where stack frames are allocated that hold local variables and parameters of functions/procedures/methods",
        "* Heap": "where dynamically allocated memory (e.g., objects and arrays in Java) is located",
        "The third area, globals, could be added to the diagram, but it is less important when using an object-oriented style where static members are less prevalent.": "where dynamically allocated memory (e.g., objects and arrays in Java) is located",
        "* Globals": "where global variables (e.g., static fields in Java) are located",
        "While we primarily use this notional machine for Java, it could easily be adapted for other imperative object-oriented programming languages, such as C# or Python.": "where global variables (e.g., static fields in Java) are located",
        "<h3 class=ui header>Notation</h3>": "where global variables (e.g., static fields in Java) are located",
        "<h4 class=ui header>Objects, Stack Frames, and References</h4>": "where global variables (e.g., static fields in Java) are located",
        "<img src=/assets/images/nm/StackAndHeapDiagram.png class=ui bordered image>": "where global variables (e.g., static fields in Java) are located",
        "<h4 class=ui header>Arrays</h4>": "where global variables (e.g., static fields in Java) are located",
        "<img src=/assets/images/nm/StackAndHeapDiagram-Arrays.png class=ui bordered image>": "where global variables (e.g., static fields in Java) are located",
        "<h4 class=ui header>Origins of Notation</h4>": "where global variables (e.g., static fields in Java) are located",
        "The *notation* for this notional machine is based on how the [BlueJ IDE](https://bluej.org/) represents objects, with a few differences:": "where global variables (e.g., static fields in Java) are located",
        "* BlueJ only shows objects, we also show stack frames (as rectangles)": "where global variables (e.g., static fields in Java) are located",
        "* Unlike BlueJ, we show references as arrows": "where global variables (e.g., static fields in Java) are located",
        "* Unlike BlueJ, we refrain from associating names with objects,": "where global variables (e.g., static fields in Java) are located",
        "to avoid the [ObjectsMustBeNamed](https://progmiscon.org/misconceptions/Java/ObjectsMustBeNamed/) misconception.": "where global variables (e.g., static fields in Java) are located",
        "* We represent fields (and variables in general) as rectangles,": "where global variables (e.g., static fields in Java) are located",
        "but we place the type of the variable **above** the rectangle, the name of the variable on the left, and the value inside, and we **do not show access modifiers** (private, protected, public).": "where global variables (e.g., static fields in Java) are located",
        "* We draw a **bold** rectangle outline for `final` variables.": "where global variables (e.g., static fields in Java) are located",
        "<img src=/assets/images/nm/StackAndHeapDiagram-BlueJ-Object.png class=ui medium image>": "where global variables (e.g., static fields in Java) are located",
        "<h3 class=ui header>Stack &amp; Heap Diagrams in Informa Clicker</h3>": "where global variables (e.g., static fields in Java) are located",
        "The [Informa Clicker](http://sape.inf.usi.ch/informa) tool, a software-based classroom response system, provides a question type with an integrated editor": "where global variables (e.g., static fields in Java) are located",
        "for stack and heap diagrams.": "where global variables (e.g., static fields in Java) are located",
        "{% include paper.html": "where global variables (e.g., static fields in Java) are located",
        "authors=Matthias Hauswirth and Andrea Adamoli": "where global variables (e.g., static fields in Java) are located",
        "url=https://dl.acm.org/doi/10.1145/1596655.1596657": "where global variables (e.g., static fields in Java) are located",
        "title=Solve & Evaluate with Informa": "A Java-based Classroom Response System for Teaching Java",
        "publication=PPPJ '09 %}": "A Java-based Classroom Response System for Teaching Java",
        "<h4 class=ui header>Constructor Calls</h4>": "A Java-based Classroom Response System for Teaching Java",
        "<iframe width=560 height=315 src=https://www.youtube-nocookie.com/embed/Hpg4fBTCYuA title=YouTube video player frameborder=0 allow=accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture allowfullscreen></iframe>": "A Java-based Classroom Response System for Teaching Java",
        "<h4 class=ui header>Local Variables</h4>": "A Java-based Classroom Response System for Teaching Java",
        "<iframe width=560 height=315 src=https://www.youtube-nocookie.com/embed/GXqU1QEdC58 title=YouTube video player frameborder=0 allow=accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture allowfullscreen></iframe>": "A Java-based Classroom Response System for Teaching Java",
        "<h4 class=ui header>Method Calls</h4>": "A Java-based Classroom Response System for Teaching Java",
        "<iframe width=560 height=315 src=https://www.youtube-nocookie.com/embed/OGsd8A9tCn0 title=YouTube video player frameborder=0 allow=accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture allowfullscreen></iframe>": "A Java-based Classroom Response System for Teaching Java",
        "<h3 class=ui header>Web-Based Stack &amp; Heap Diagram Editor</h3>": "A Java-based Classroom Response System for Teaching Java",
        "Davide Ciulla developed a prototype of a [web based stack and heap diagram editor](https://stackandheap.netlify.app/):": "A Java-based Classroom Response System for Teaching Java",
        "<iframe src=https://stackandheap.netlify.app/ width=100% height=600>": "A Java-based Classroom Response System for Teaching Java",
        "</iframe>": "A Java-based Classroom Response System for Teaching Java",
    },
    "PaperLinkedLists.html": {
        "title": "Paper Linked Lists",
        "author": "colleen",
        "ProgrammingLanguage": "Java",
        "ProgrammingParadigm": "imperative",
        "ConceptualAdvantage": "Helps students plan and debug code",
        "Form": "Representation",
        "DrawsAttentionTo": "The fact that each reference can only point to a single thing",
        "UseWhen": "Teaching students to write their own List/ListNode class",
        "Cost": "If you print/prepare these for students it is a pain, but helpful to use in class",
        "OriginSource": "Own practice",
        "image": "PaperLinkedLists.jpg",
        "Mapping:": "PaperLinkedLists.jpg",
        "Object": "Type written and underlined in a rectangle",
        "variable": "variable name followed by a small box",
        "int": "number written in a small box",
        "reference": "arrow originating from a small box",
        "null": "X written in a small box",
        "local variable": "free floating",
        "instance variable": "shown inside an object",
        "Topic": "Memory",
        "": "<code>this</code>, <code>list2</code>, <code>prev</code>, <code>s</code>, <code>node</code>, and <code>next</code>. If a reference is changed, I re-position the paper so that the arrow of the newly set reference now points to the correct object. If the changed reference is an instance variable, I re-position that object and ensure that anything that was previously referencing that object still references that object. If a reference is set to <code>null</code>, I fold the paper to cover the box and arrow with a new box containing an <code>X</code>. For example, in (add image) the arrows of the local variables <code>list2</code> and <code>next</code> are not visible because the paper has been folded back. Similarly, the bottom of the <code>ListNode</code> on the right of (add image) has been folded up to cover the arrow and indicate that the instance variable <code>myNext</code> is <code>null</code>.",
        "<p>": "<code>this</code>, <code>list2</code>, <code>prev</code>, <code>s</code>, <code>node</code>, and <code>next</code>. If a reference is changed, I re-position the paper so that the arrow of the newly set reference now points to the correct object. If the changed reference is an instance variable, I re-position that object and ensure that anything that was previously referencing that object still references that object. If a reference is set to <code>null</code>, I fold the paper to cover the box and arrow with a new box containing an <code>X</code>. For example, in (add image) the arrows of the local variables <code>list2</code> and <code>next</code> are not visible because the paper has been folded back. Similarly, the bottom of the <code>ListNode</code> on the right of (add image) has been folded up to cover the arrow and indicate that the instance variable <code>myNext</code> is <code>null</code>.",
        "Before students write <code>List</code> and <code>ListNode</code> classes in Java, I give students paper cut outs representing <code>List</code> and <code>ListNode</code> objects (add image). By default, the paper <code>ListNode</code> objects include an arrow from their variable <code>myNext</code>. Students can fold the bottom of one of the <code>ListNode</code> paper object up to cover that arrow and replace the value of <code>myNext</code> with an X representing <code>null</code>. I also give students variables such as <code>this</code> and <code>current</code> to be able to reference specific <code>List</code> and <code>ListNode</code> objects, respectively. I believe that these paper versions of the Objects are helpful for students as they plan and debug their code because they enforce the constraint that a variable can only reference one thing at a time.": "Memory",
        "</p>": "<code>this</code>, <code>list2</code>, <code>prev</code>, <code>s</code>, <code>node</code>, and <code>next</code>. If a reference is changed, I re-position the paper so that the arrow of the newly set reference now points to the correct object. If the changed reference is an instance variable, I re-position that object and ensure that anything that was previously referencing that object still references that object. If a reference is set to <code>null</code>, I fold the paper to cover the box and arrow with a new box containing an <code>X</code>. For example, in (add image) the arrows of the local variables <code>list2</code> and <code>next</code> are not visible because the paper has been folded back. Similarly, the bottom of the <code>ListNode</code> on the right of (add image) has been folded up to cover the arrow and indicate that the instance variable <code>myNext</code> is <code>null</code>.",
        "<b>Scope</b>": "Memory",
        "The Notional Machine (NM) described here maps to the execution of Java. The NM represents local variables, <code>String</code> objects, objects of user-defined types, primitives, references, and null. The examples here focus on representing a linked list in Java. This NM is part of a larger NM that also includes stack frames and arrays of both primitive and object types. Neither the larger NM nor the specific NM described here include program counters, the type of a variable, class variables, or return values. The <code>String</code> class is the only Java library class that is included in either NM.": "Memory",
        "<b>Mapping</b>": "Memory",
        "(add image) shows a <code>List</code> named <code>this</code> with two <code>ListNodes</code>. The corresponding Java classes are shown below. The larger NM, described above, is hand written. The NM described here uses paper representations of <code>List</code> and <code>ListNodes</code> objects. These papers are folded and written on when using them to trace through Java code.": "Memory",
        "<pre>": "<code>this</code>, <code>list2</code>, <code>prev</code>, <code>s</code>, <code>node</code>, and <code>next</code>. If a reference is changed, I re-position the paper so that the arrow of the newly set reference now points to the correct object. If the changed reference is an instance variable, I re-position that object and ensure that anything that was previously referencing that object still references that object. If a reference is set to <code>null</code>, I fold the paper to cover the box and arrow with a new box containing an <code>X</code>. For example, in (add image) the arrows of the local variables <code>list2</code> and <code>next</code> are not visible because the paper has been folded back. Similarly, the bottom of the <code>ListNode</code> on the right of (add image) has been folded up to cover the arrow and indicate that the instance variable <code>myNext</code> is <code>null</code>.",
        "public class List {": "Memory",
        "private int mySize;": "Memory",
        "private ListNode myHead;": "Memory",
        "private class ListNode {": "Memory",
        "private String myData;": "Memory",
        "private ListNode myNext;": "Memory",
        "}": "<code>this</code>, <code>list2</code>, <code>prev</code>, <code>s</code>, <code>node</code>, and <code>next</code>. If a reference is changed, I re-position the paper so that the arrow of the newly set reference now points to the correct object. If the changed reference is an instance variable, I re-position that object and ensure that anything that was previously referencing that object still references that object. If a reference is set to <code>null</code>, I fold the paper to cover the box and arrow with a new box containing an <code>X</code>. For example, in (add image) the arrows of the local variables <code>list2</code> and <code>next</code> are not visible because the paper has been folded back. Similarly, the bottom of the <code>ListNode</code> on the right of (add image) has been folded up to cover the arrow and indicate that the instance variable <code>myNext</code> is <code>null</code>.",
        "</pre>": "<code>this</code>, <code>list2</code>, <code>prev</code>, <code>s</code>, <code>node</code>, and <code>next</code>. If a reference is changed, I re-position the paper so that the arrow of the newly set reference now points to the correct object. If the changed reference is an instance variable, I re-position that object and ensure that anything that was previously referencing that object still references that object. If a reference is set to <code>null</code>, I fold the paper to cover the box and arrow with a new box containing an <code>X</code>. For example, in (add image) the arrows of the local variables <code>list2</code> and <code>next</code> are not visible because the paper has been folded back. Similarly, the bottom of the <code>ListNode</code> on the right of (add image) has been folded up to cover the arrow and indicate that the instance variable <code>myNext</code> is <code>null</code>.",
        "I draw objects as boxes. I write the dynamic type of the object (i.e., the constructor that was called) at the top of the box and underline it. The box contains any instance variables that the object has. I shade the box for <code>List</code> objects, but not for <code>ListNode</code> objects.": "Memory",
        "I represent variables as small boxes; the type of the variable is not represented. I write the values of Java primitives directly in that small box. For example, (add image) shows the instance variable <code>mySize</code>, which is of type <code>int</code>. If a primitive value is updated, I cross out the previous value and rewrite it in the box.": "Memory",
        "To represent references, I use arrows originating from the small box. (add image) shows instance variables <code>myHead</code>, <code>myData</code>, and <code>myNext</code>, which are all references. (add image) also shows references that are local variables": "<code>this</code>, <code>list2</code>, <code>prev</code>, <code>s</code>, <code>node</code>, and <code>next</code>. If a reference is changed, I re-position the paper so that the arrow of the newly set reference now points to the correct object. If the changed reference is an instance variable, I re-position that object and ensure that anything that was previously referencing that object still references that object. If a reference is set to <code>null</code>, I fold the paper to cover the box and arrow with a new box containing an <code>X</code>. For example, in (add image) the arrows of the local variables <code>list2</code> and <code>next</code> are not visible because the paper has been folded back. Similarly, the bottom of the <code>ListNode</code> on the right of (add image) has been folded up to cover the arrow and indicate that the instance variable <code>myNext</code> is <code>null</code>.",
        "I draw <code>String</code> objects as a rectangle. Inside the rectangle, I put double quotes and the content of the <code>String</code>. (add image) shows two <code>String</code> objects with content <code>X</code> and <code>Y</code>, respectively. In the paper template shown in (add image), the rectangle that could include the contents of a <code>String</code> is empty and a <code>String</code> can be written in the rectangle.": "<code>this</code>, <code>list2</code>, <code>prev</code>, <code>s</code>, <code>node</code>, and <code>next</code>. If a reference is changed, I re-position the paper so that the arrow of the newly set reference now points to the correct object. If the changed reference is an instance variable, I re-position that object and ensure that anything that was previously referencing that object still references that object. If a reference is set to <code>null</code>, I fold the paper to cover the box and arrow with a new box containing an <code>X</code>. For example, in (add image) the arrows of the local variables <code>list2</code> and <code>next</code> are not visible because the paper has been folded back. Similarly, the bottom of the <code>ListNode</code> on the right of (add image) has been folded up to cover the arrow and indicate that the instance variable <code>myNext</code> is <code>null</code>.",
        "<b>Conceptual Advantages</b>": "<code>this</code>, <code>list2</code>, <code>prev</code>, <code>s</code>, <code>node</code>, and <code>next</code>. If a reference is changed, I re-position the paper so that the arrow of the newly set reference now points to the correct object. If the changed reference is an instance variable, I re-position that object and ensure that anything that was previously referencing that object still references that object. If a reference is set to <code>null</code>, I fold the paper to cover the box and arrow with a new box containing an <code>X</code>. For example, in (add image) the arrows of the local variables <code>list2</code> and <code>next</code> are not visible because the paper has been folded back. Similarly, the bottom of the <code>ListNode</code> on the right of (add image) has been folded up to cover the arrow and indicate that the instance variable <code>myNext</code> is <code>null</code>.",
        "The pre-drawn arrows on the paper mean that any variable can only reference one thing at a time. When students are tracing through code using hand-written diagrams, it can be difficult to keep track of the current value of a reference if that reference has been changed. For example, a drawing may end up with multiple arrows that are crossed out. For example, the local variable <code>node</code> shown in (add image) can be moved along the <code>ListNode</code>s to trace code that walks through the linked list. Such iteration can be quite confusing when using hand-written arrows.": "<code>this</code>, <code>list2</code>, <code>prev</code>, <code>s</code>, <code>node</code>, and <code>next</code>. If a reference is changed, I re-position the paper so that the arrow of the newly set reference now points to the correct object. If the changed reference is an instance variable, I re-position that object and ensure that anything that was previously referencing that object still references that object. If a reference is set to <code>null</code>, I fold the paper to cover the box and arrow with a new box containing an <code>X</code>. For example, in (add image) the arrows of the local variables <code>list2</code> and <code>next</code> are not visible because the paper has been folded back. Similarly, the bottom of the <code>ListNode</code> on the right of (add image) has been folded up to cover the arrow and indicate that the instance variable <code>myNext</code> is <code>null</code>.",
        "In students' hand-written drawings, they sometimes draw an arrow pointing at another variable instead of having both arrows point at the same object. The paper objects seem to make this less intuitive for students and they tend to have arrows point at <code>List</code> and <code>ListNode</code> objects.": "<code>this</code>, <code>list2</code>, <code>prev</code>, <code>s</code>, <code>node</code>, and <code>next</code>. If a reference is changed, I re-position the paper so that the arrow of the newly set reference now points to the correct object. If the changed reference is an instance variable, I re-position that object and ensure that anything that was previously referencing that object still references that object. If a reference is set to <code>null</code>, I fold the paper to cover the box and arrow with a new box containing an <code>X</code>. For example, in (add image) the arrows of the local variables <code>list2</code> and <code>next</code> are not visible because the paper has been folded back. Similarly, the bottom of the <code>ListNode</code> on the right of (add image) has been folded up to cover the arrow and indicate that the instance variable <code>myNext</code> is <code>null</code>.",
        "When writing code, students often make small mistakes in their code confusing <code>List</code> and <code>ListNode</code> objects. For example, students might try to access <code>myHead</code> on a <code>ListNode</code>. Coloring in the rectangle of the <code>List</code> objects is intended to help students recognize and remember that there are two types of objects.": "<code>this</code>, <code>list2</code>, <code>prev</code>, <code>s</code>, <code>node</code>, and <code>next</code>. If a reference is changed, I re-position the paper so that the arrow of the newly set reference now points to the correct object. If the changed reference is an instance variable, I re-position that object and ensure that anything that was previously referencing that object still references that object. If a reference is set to <code>null</code>, I fold the paper to cover the box and arrow with a new box containing an <code>X</code>. For example, in (add image) the arrows of the local variables <code>list2</code> and <code>next</code> are not visible because the paper has been folded back. Similarly, the bottom of the <code>ListNode</code> on the right of (add image) has been folded up to cover the arrow and indicate that the instance variable <code>myNext</code> is <code>null</code>.",
        "Before I used the paper versions, I found that students had difficulty drawing diagrams that were helpful to them when planning or debugging their code. Each <code>ListNode</code> object was time consuming to draw. I used to show them how they might draw simplified versions. In these simplified versions I would write L or LN at the top of the Objects to distinguish <code>List</code> and  <code>ListNode</code> objects. I would also not list any instance variables and only show the reference value (i.e., null or an arrow). These simplified versions seemed helpful to some students, but changing what a variable referenced led to crossed out arrows, which I think confused students.": "<code>this</code>, <code>list2</code>, <code>prev</code>, <code>s</code>, <code>node</code>, and <code>next</code>. If a reference is changed, I re-position the paper so that the arrow of the newly set reference now points to the correct object. If the changed reference is an instance variable, I re-position that object and ensure that anything that was previously referencing that object still references that object. If a reference is set to <code>null</code>, I fold the paper to cover the box and arrow with a new box containing an <code>X</code>. For example, in (add image) the arrows of the local variables <code>list2</code> and <code>next</code> are not visible because the paper has been folded back. Similarly, the bottom of the <code>ListNode</code> on the right of (add image) has been folded up to cover the arrow and indicate that the instance variable <code>myNext</code> is <code>null</code>.",
        "In the provided classes, I append the text <code>my</code> to the beginning of instance variable names to try to reinforce that every object gets a copy of those instance variables. I tell students that this is why I name instance variables in this way.": "<code>this</code>, <code>list2</code>, <code>prev</code>, <code>s</code>, <code>node</code>, and <code>next</code>. If a reference is changed, I re-position the paper so that the arrow of the newly set reference now points to the correct object. If the changed reference is an instance variable, I re-position that object and ensure that anything that was previously referencing that object still references that object. If a reference is set to <code>null</code>, I fold the paper to cover the box and arrow with a new box containing an <code>X</code>. For example, in (add image) the arrows of the local variables <code>list2</code> and <code>next</code> are not visible because the paper has been folded back. Similarly, the bottom of the <code>ListNode</code> on the right of (add image) has been folded up to cover the arrow and indicate that the instance variable <code>myNext</code> is <code>null</code>.",
        "<b>Conceptual Disadvantages</b>": "<code>this</code>, <code>list2</code>, <code>prev</code>, <code>s</code>, <code>node</code>, and <code>next</code>. If a reference is changed, I re-position the paper so that the arrow of the newly set reference now points to the correct object. If the changed reference is an instance variable, I re-position that object and ensure that anything that was previously referencing that object still references that object. If a reference is set to <code>null</code>, I fold the paper to cover the box and arrow with a new box containing an <code>X</code>. For example, in (add image) the arrows of the local variables <code>list2</code> and <code>next</code> are not visible because the paper has been folded back. Similarly, the bottom of the <code>ListNode</code> on the right of (add image) has been folded up to cover the arrow and indicate that the instance variable <code>myNext</code> is <code>null</code>.",
        "The way <code>String</code> objects are drawn is not consistent with Objects of user-defined classes. My students have never commented on this inconsistency, which might be because I use <code>String</code> objects in these diagrams before I introduce objects of user-defined classes.": "<code>this</code>, <code>list2</code>, <code>prev</code>, <code>s</code>, <code>node</code>, and <code>next</code>. If a reference is changed, I re-position the paper so that the arrow of the newly set reference now points to the correct object. If the changed reference is an instance variable, I re-position that object and ensure that anything that was previously referencing that object still references that object. If a reference is set to <code>null</code>, I fold the paper to cover the box and arrow with a new box containing an <code>X</code>. For example, in (add image) the arrows of the local variables <code>list2</code> and <code>next</code> are not visible because the paper has been folded back. Similarly, the bottom of the <code>ListNode</code> on the right of (add image) has been folded up to cover the arrow and indicate that the instance variable <code>myNext</code> is <code>null</code>.",
        "<b>What failed attempts have you had?</b>": "<code>this</code>, <code>list2</code>, <code>prev</code>, <code>s</code>, <code>node</code>, and <code>next</code>. If a reference is changed, I re-position the paper so that the arrow of the newly set reference now points to the correct object. If the changed reference is an instance variable, I re-position that object and ensure that anything that was previously referencing that object still references that object. If a reference is set to <code>null</code>, I fold the paper to cover the box and arrow with a new box containing an <code>X</code>. For example, in (add image) the arrows of the local variables <code>list2</code> and <code>next</code> are not visible because the paper has been folded back. Similarly, the bottom of the <code>ListNode</code> on the right of (add image) has been folded up to cover the arrow and indicate that the instance variable <code>myNext</code> is <code>null</code>.",
        "I tried prototyping versions that used ribbon or yarn for the arrow. However, this made working with the pieces too cumbersome and did not seem to add functionality.": "<code>this</code>, <code>list2</code>, <code>prev</code>, <code>s</code>, <code>node</code>, and <code>next</code>. If a reference is changed, I re-position the paper so that the arrow of the newly set reference now points to the correct object. If the changed reference is an instance variable, I re-position that object and ensure that anything that was previously referencing that object still references that object. If a reference is set to <code>null</code>, I fold the paper to cover the box and arrow with a new box containing an <code>X</code>. For example, in (add image) the arrows of the local variables <code>list2</code> and <code>next</code> are not visible because the paper has been folded back. Similarly, the bottom of the <code>ListNode</code> on the right of (add image) has been folded up to cover the arrow and indicate that the instance variable <code>myNext</code> is <code>null</code>.",
        "I made a version of these for the Binary Search Tree (BST) class. However, I found it easier to draw pictures of the trees because the changes to the BST structure were typically just changes of a single reference and the rest of the structure of the BST needed to stay unchanged. Unfortunately, arranging the papers in the BST structure was cumbersome and easily disrupted.": "<code>this</code>, <code>list2</code>, <code>prev</code>, <code>s</code>, <code>node</code>, and <code>next</code>. If a reference is changed, I re-position the paper so that the arrow of the newly set reference now points to the correct object. If the changed reference is an instance variable, I re-position that object and ensure that anything that was previously referencing that object still references that object. If a reference is set to <code>null</code>, I fold the paper to cover the box and arrow with a new box containing an <code>X</code>. For example, in (add image) the arrows of the local variables <code>list2</code> and <code>next</code> are not visible because the paper has been folded back. Similarly, the bottom of the <code>ListNode</code> on the right of (add image) has been folded up to cover the arrow and indicate that the instance variable <code>myNext</code> is <code>null</code>.",
        "<b>Introducing the NM to Students</b>": "<code>this</code>, <code>list2</code>, <code>prev</code>, <code>s</code>, <code>node</code>, and <code>next</code>. If a reference is changed, I re-position the paper so that the arrow of the newly set reference now points to the correct object. If the changed reference is an instance variable, I re-position that object and ensure that anything that was previously referencing that object still references that object. If a reference is set to <code>null</code>, I fold the paper to cover the box and arrow with a new box containing an <code>X</code>. For example, in (add image) the arrows of the local variables <code>list2</code> and <code>next</code> are not visible because the paper has been folded back. Similarly, the bottom of the <code>ListNode</code> on the right of (add image) has been folded up to cover the arrow and indicate that the instance variable <code>myNext</code> is <code>null</code>.",
        "<b>Instructional Context</b>": "<code>this</code>, <code>list2</code>, <code>prev</code>, <code>s</code>, <code>node</code>, and <code>next</code>. If a reference is changed, I re-position the paper so that the arrow of the newly set reference now points to the correct object. If the changed reference is an instance variable, I re-position that object and ensure that anything that was previously referencing that object still references that object. If a reference is set to <code>null</code>, I fold the paper to cover the box and arrow with a new box containing an <code>X</code>. For example, in (add image) the arrows of the local variables <code>list2</code> and <code>next</code> are not visible because the paper has been folded back. Similarly, the bottom of the <code>ListNode</code> on the right of (add image) has been folded up to cover the arrow and indicate that the instance variable <code>myNext</code> is <code>null</code>.",
        "In my CS2 course, my students are learning Java. I have them implement a linked list structure in Java to help them practice with Java references. This is students' third, week-long assignment using user-defined Java classes. I use a <code>ListNode class</code> nested within the <code>List</code> class as shown in (add image).": "<code>this</code>, <code>list2</code>, <code>prev</code>, <code>s</code>, <code>node</code>, and <code>next</code>. If a reference is changed, I re-position the paper so that the arrow of the newly set reference now points to the correct object. If the changed reference is an instance variable, I re-position that object and ensure that anything that was previously referencing that object still references that object. If a reference is set to <code>null</code>, I fold the paper to cover the box and arrow with a new box containing an <code>X</code>. For example, in (add image) the arrows of the local variables <code>list2</code> and <code>next</code> are not visible because the paper has been folded back. Similarly, the bottom of the <code>ListNode</code> on the right of (add image) has been folded up to cover the arrow and indicate that the instance variable <code>myNext</code> is <code>null</code>.",
        "I start using similar drawings when I introduce arrays (before I introduce Objects) and students practice creating these drawings during lecture.": "<code>this</code>, <code>list2</code>, <code>prev</code>, <code>s</code>, <code>node</code>, and <code>next</code>. If a reference is changed, I re-position the paper so that the arrow of the newly set reference now points to the correct object. If the changed reference is an instance variable, I re-position that object and ensure that anything that was previously referencing that object still references that object. If a reference is set to <code>null</code>, I fold the paper to cover the box and arrow with a new box containing an <code>X</code>. For example, in (add image) the arrows of the local variables <code>list2</code> and <code>next</code> are not visible because the paper has been folded back. Similarly, the bottom of the <code>ListNode</code> on the right of (add image) has been folded up to cover the arrow and indicate that the instance variable <code>myNext</code> is <code>null</code>.",
        "Depending upon the term, my lecture sessions have 50 to 150 students. Students are accustomed to working in pairs to write, trace, or discuss code throughout a single lecture. During a typical lecture, students are asked to work in pairs between 5 and 10 times. My lecture period is 75 minutes and the following instructional sequence might take between 30 and 60 minutes.": "<code>this</code>, <code>list2</code>, <code>prev</code>, <code>s</code>, <code>node</code>, and <code>next</code>. If a reference is changed, I re-position the paper so that the arrow of the newly set reference now points to the correct object. If the changed reference is an instance variable, I re-position that object and ensure that anything that was previously referencing that object still references that object. If a reference is set to <code>null</code>, I fold the paper to cover the box and arrow with a new box containing an <code>X</code>. For example, in (add image) the arrows of the local variables <code>list2</code> and <code>next</code> are not visible because the paper has been folded back. Similarly, the bottom of the <code>ListNode</code> on the right of (add image) has been folded up to cover the arrow and indicate that the instance variable <code>myNext</code> is <code>null</code>.",
        "<b>Instructional Sequence</b>": "<code>this</code>, <code>list2</code>, <code>prev</code>, <code>s</code>, <code>node</code>, and <code>next</code>. If a reference is changed, I re-position the paper so that the arrow of the newly set reference now points to the correct object. If the changed reference is an instance variable, I re-position that object and ensure that anything that was previously referencing that object still references that object. If a reference is set to <code>null</code>, I fold the paper to cover the box and arrow with a new box containing an <code>X</code>. For example, in (add image) the arrows of the local variables <code>list2</code> and <code>next</code> are not visible because the paper has been folded back. Similarly, the bottom of the <code>ListNode</code> on the right of (add image) has been folded up to cover the arrow and indicate that the instance variable <code>myNext</code> is <code>null</code>.",
        "I give students a set of these papers at the beginning of class. This involves copying and cutting a set of these for each student, which is a pain! As a review of Objects, I ask students to write the Java classes (and instance variables) that they can infer exist. They haven't seen inner classes, but hopefully find this task not too difficult. Under a document camera, I show them that you can fold the bottoms up. After going over the resulting Java classes and introducing inner classes, I ask students to write a constructor for each class. I go over the constructors and then ask students to draw a memory model for the code shown in (add image). I use this to help students see that the variable <code>spam1</code> references an empty  <code>List</code> and the variable <code>spam2</code> is  <code>null</code>. The variable <code>spam2</code> is a variable that \\textit{could</code> reference a List object, but it does not.": "<code>this</code>, <code>list2</code>, <code>prev</code>, <code>s</code>, <code>node</code>, and <code>next</code>. If a reference is changed, I re-position the paper so that the arrow of the newly set reference now points to the correct object. If the changed reference is an instance variable, I re-position that object and ensure that anything that was previously referencing that object still references that object. If a reference is set to <code>null</code>, I fold the paper to cover the box and arrow with a new box containing an <code>X</code>. For example, in (add image) the arrows of the local variables <code>list2</code> and <code>next</code> are not visible because the paper has been folded back. Similarly, the bottom of the <code>ListNode</code> on the right of (add image) has been folded up to cover the arrow and indicate that the instance variable <code>myNext</code> is <code>null</code>.",
        "public static void main(String[] args){": "<code>this</code>, <code>list2</code>, <code>prev</code>, <code>s</code>, <code>node</code>, and <code>next</code>. If a reference is changed, I re-position the paper so that the arrow of the newly set reference now points to the correct object. If the changed reference is an instance variable, I re-position that object and ensure that anything that was previously referencing that object still references that object. If a reference is set to <code>null</code>, I fold the paper to cover the box and arrow with a new box containing an <code>X</code>. For example, in (add image) the arrows of the local variables <code>list2</code> and <code>next</code> are not visible because the paper has been folded back. Similarly, the bottom of the <code>ListNode</code> on the right of (add image) has been folded up to cover the arrow and indicate that the instance variable <code>myNext</code> is <code>null</code>.",
        "List spam1 = new List();": "<code>this</code>, <code>list2</code>, <code>prev</code>, <code>s</code>, <code>node</code>, and <code>next</code>. If a reference is changed, I re-position the paper so that the arrow of the newly set reference now points to the correct object. If the changed reference is an instance variable, I re-position that object and ensure that anything that was previously referencing that object still references that object. If a reference is set to <code>null</code>, I fold the paper to cover the box and arrow with a new box containing an <code>X</code>. For example, in (add image) the arrows of the local variables <code>list2</code> and <code>next</code> are not visible because the paper has been folded back. Similarly, the bottom of the <code>ListNode</code> on the right of (add image) has been folded up to cover the arrow and indicate that the instance variable <code>myNext</code> is <code>null</code>.",
        "List spam2;": "<code>this</code>, <code>list2</code>, <code>prev</code>, <code>s</code>, <code>node</code>, and <code>next</code>. If a reference is changed, I re-position the paper so that the arrow of the newly set reference now points to the correct object. If the changed reference is an instance variable, I re-position that object and ensure that anything that was previously referencing that object still references that object. If a reference is set to <code>null</code>, I fold the paper to cover the box and arrow with a new box containing an <code>X</code>. For example, in (add image) the arrows of the local variables <code>list2</code> and <code>next</code> are not visible because the paper has been folded back. Similarly, the bottom of the <code>ListNode</code> on the right of (add image) has been folded up to cover the arrow and indicate that the instance variable <code>myNext</code> is <code>null</code>.",
        "Next, students write code for a method <code>addToFront(String s)</code>, which is shown in (add image). To try to make the task easier, I tell students that this requires only four steps. I encourage students to figure out the steps on the paper Objects with a buddy before trying to write the code. Before I used these paper cut outs, few students were able to complete the task. Now, after most pairs of students have a solution, I go over the answer. I illustrate the steps under a document camera with the paper objects a few times before showing how each step translates into a line of Java code. To remind them that we always need to consider the case of an empty  <code>List</code>, I ask them to discuss with their buddy if this would work if the <code>List</code> was originally empty; it does. Throughout my course, I always use the variable <code>this</code> explicitly because I want to draw students' attention to the fact that those variables are instance variables and not local variables.": "<code>this</code>, <code>list2</code>, <code>prev</code>, <code>s</code>, <code>node</code>, and <code>next</code>. If a reference is changed, I re-position the paper so that the arrow of the newly set reference now points to the correct object. If the changed reference is an instance variable, I re-position that object and ensure that anything that was previously referencing that object still references that object. If a reference is set to <code>null</code>, I fold the paper to cover the box and arrow with a new box containing an <code>X</code>. For example, in (add image) the arrows of the local variables <code>list2</code> and <code>next</code> are not visible because the paper has been folded back. Similarly, the bottom of the <code>ListNode</code> on the right of (add image) has been folded up to cover the arrow and indicate that the instance variable <code>myNext</code> is <code>null</code>.",
        "public void addToFront(String s){": "<code>this</code>, <code>list2</code>, <code>prev</code>, <code>s</code>, <code>node</code>, and <code>next</code>. If a reference is changed, I re-position the paper so that the arrow of the newly set reference now points to the correct object. If the changed reference is an instance variable, I re-position that object and ensure that anything that was previously referencing that object still references that object. If a reference is set to <code>null</code>, I fold the paper to cover the box and arrow with a new box containing an <code>X</code>. For example, in (add image) the arrows of the local variables <code>list2</code> and <code>next</code> are not visible because the paper has been folded back. Similarly, the bottom of the <code>ListNode</code> on the right of (add image) has been folded up to cover the arrow and indicate that the instance variable <code>myNext</code> is <code>null</code>.",
        "ListNode node = new ListNode(s);": "<code>this</code>, <code>list2</code>, <code>prev</code>, <code>s</code>, <code>node</code>, and <code>next</code>. If a reference is changed, I re-position the paper so that the arrow of the newly set reference now points to the correct object. If the changed reference is an instance variable, I re-position that object and ensure that anything that was previously referencing that object still references that object. If a reference is set to <code>null</code>, I fold the paper to cover the box and arrow with a new box containing an <code>X</code>. For example, in (add image) the arrows of the local variables <code>list2</code> and <code>next</code> are not visible because the paper has been folded back. Similarly, the bottom of the <code>ListNode</code> on the right of (add image) has been folded up to cover the arrow and indicate that the instance variable <code>myNext</code> is <code>null</code>.",
        "node.myNext = this.myHead;": "<code>this</code>, <code>list2</code>, <code>prev</code>, <code>s</code>, <code>node</code>, and <code>next</code>. If a reference is changed, I re-position the paper so that the arrow of the newly set reference now points to the correct object. If the changed reference is an instance variable, I re-position that object and ensure that anything that was previously referencing that object still references that object. If a reference is set to <code>null</code>, I fold the paper to cover the box and arrow with a new box containing an <code>X</code>. For example, in (add image) the arrows of the local variables <code>list2</code> and <code>next</code> are not visible because the paper has been folded back. Similarly, the bottom of the <code>ListNode</code> on the right of (add image) has been folded up to cover the arrow and indicate that the instance variable <code>myNext</code> is <code>null</code>.",
        "this.myHead = node;": "<code>this</code>, <code>list2</code>, <code>prev</code>, <code>s</code>, <code>node</code>, and <code>next</code>. If a reference is changed, I re-position the paper so that the arrow of the newly set reference now points to the correct object. If the changed reference is an instance variable, I re-position that object and ensure that anything that was previously referencing that object still references that object. If a reference is set to <code>null</code>, I fold the paper to cover the box and arrow with a new box containing an <code>X</code>. For example, in (add image) the arrows of the local variables <code>list2</code> and <code>next</code> are not visible because the paper has been folded back. Similarly, the bottom of the <code>ListNode</code> on the right of (add image) has been folded up to cover the arrow and indicate that the instance variable <code>myNext</code> is <code>null</code>.",
        "this.mySize++;": "<code>this</code>, <code>list2</code>, <code>prev</code>, <code>s</code>, <code>node</code>, and <code>next</code>. If a reference is changed, I re-position the paper so that the arrow of the newly set reference now points to the correct object. If the changed reference is an instance variable, I re-position that object and ensure that anything that was previously referencing that object still references that object. If a reference is set to <code>null</code>, I fold the paper to cover the box and arrow with a new box containing an <code>X</code>. For example, in (add image) the arrows of the local variables <code>list2</code> and <code>next</code> are not visible because the paper has been folded back. Similarly, the bottom of the <code>ListNode</code> on the right of (add image) has been folded up to cover the arrow and indicate that the instance variable <code>myNext</code> is <code>null</code>.",
        "Next, I ask students to trace a version of the method, now named <code>addToFrontWrong</code> shown in (add image). In <code>addToFrontWrong</code>, I flipped the order of two lines of code from the correct <code>addToFront</code> method. The line <code>this.myHead = node;</code> results in losing <code>ListNode</code> objects that were in the <code>List</code> before the method call. The line <code>node.myNext = this.myHead;</code> results in the instance variable <code>myNext</code> in our newly created <code>ListNode</code> to reference itself. I point out that as a programmer we sometimes feel really frustrated when we find that we only needed to make a tiny change in our code to go from broken to working coding. I explain that we just traced a tiny change that made everything break! The details matter and we need to be paying attention to what our code does step by step. I also point out that we could have written the line <code>this.mySize++;</code> anywhere in the method.": "<code>this</code>, <code>list2</code>, <code>prev</code>, <code>s</code>, <code>node</code>, and <code>next</code>. If a reference is changed, I re-position the paper so that the arrow of the newly set reference now points to the correct object. If the changed reference is an instance variable, I re-position that object and ensure that anything that was previously referencing that object still references that object. If a reference is set to <code>null</code>, I fold the paper to cover the box and arrow with a new box containing an <code>X</code>. For example, in (add image) the arrows of the local variables <code>list2</code> and <code>next</code> are not visible because the paper has been folded back. Similarly, the bottom of the <code>ListNode</code> on the right of (add image) has been folded up to cover the arrow and indicate that the instance variable <code>myNext</code> is <code>null</code>.",
        "public void addToFrontWrong(String s){": "<code>this</code>, <code>list2</code>, <code>prev</code>, <code>s</code>, <code>node</code>, and <code>next</code>. If a reference is changed, I re-position the paper so that the arrow of the newly set reference now points to the correct object. If the changed reference is an instance variable, I re-position that object and ensure that anything that was previously referencing that object still references that object. If a reference is set to <code>null</code>, I fold the paper to cover the box and arrow with a new box containing an <code>X</code>. For example, in (add image) the arrows of the local variables <code>list2</code> and <code>next</code> are not visible because the paper has been folded back. Similarly, the bottom of the <code>ListNode</code> on the right of (add image) has been folded up to cover the arrow and indicate that the instance variable <code>myNext</code> is <code>null</code>.",
        "public int length(){": "<code>this</code>, <code>list2</code>, <code>prev</code>, <code>s</code>, <code>node</code>, and <code>next</code>. If a reference is changed, I re-position the paper so that the arrow of the newly set reference now points to the correct object. If the changed reference is an instance variable, I re-position that object and ensure that anything that was previously referencing that object still references that object. If a reference is set to <code>null</code>, I fold the paper to cover the box and arrow with a new box containing an <code>X</code>. For example, in (add image) the arrows of the local variables <code>list2</code> and <code>next</code> are not visible because the paper has been folded back. Similarly, the bottom of the <code>ListNode</code> on the right of (add image) has been folded up to cover the arrow and indicate that the instance variable <code>myNext</code> is <code>null</code>.",
        "int count = 0;": "<code>this</code>, <code>list2</code>, <code>prev</code>, <code>s</code>, <code>node</code>, and <code>next</code>. If a reference is changed, I re-position the paper so that the arrow of the newly set reference now points to the correct object. If the changed reference is an instance variable, I re-position that object and ensure that anything that was previously referencing that object still references that object. If a reference is set to <code>null</code>, I fold the paper to cover the box and arrow with a new box containing an <code>X</code>. For example, in (add image) the arrows of the local variables <code>list2</code> and <code>next</code> are not visible because the paper has been folded back. Similarly, the bottom of the <code>ListNode</code> on the right of (add image) has been folded up to cover the arrow and indicate that the instance variable <code>myNext</code> is <code>null</code>.",
        "ListNode node = this.myHead;": "<code>this</code>, <code>list2</code>, <code>prev</code>, <code>s</code>, <code>node</code>, and <code>next</code>. If a reference is changed, I re-position the paper so that the arrow of the newly set reference now points to the correct object. If the changed reference is an instance variable, I re-position that object and ensure that anything that was previously referencing that object still references that object. If a reference is set to <code>null</code>, I fold the paper to cover the box and arrow with a new box containing an <code>X</code>. For example, in (add image) the arrows of the local variables <code>list2</code> and <code>next</code> are not visible because the paper has been folded back. Similarly, the bottom of the <code>ListNode</code> on the right of (add image) has been folded up to cover the arrow and indicate that the instance variable <code>myNext</code> is <code>null</code>.",
        "while (node != null){": "<code>this</code>, <code>list2</code>, <code>prev</code>, <code>s</code>, <code>node</code>, and <code>next</code>. If a reference is changed, I re-position the paper so that the arrow of the newly set reference now points to the correct object. If the changed reference is an instance variable, I re-position that object and ensure that anything that was previously referencing that object still references that object. If a reference is set to <code>null</code>, I fold the paper to cover the box and arrow with a new box containing an <code>X</code>. For example, in (add image) the arrows of the local variables <code>list2</code> and <code>next</code> are not visible because the paper has been folded back. Similarly, the bottom of the <code>ListNode</code> on the right of (add image) has been folded up to cover the arrow and indicate that the instance variable <code>myNext</code> is <code>null</code>.",
        "node = node.myNext;": "<code>this</code>, <code>list2</code>, <code>prev</code>, <code>s</code>, <code>node</code>, and <code>next</code>. If a reference is changed, I re-position the paper so that the arrow of the newly set reference now points to the correct object. If the changed reference is an instance variable, I re-position that object and ensure that anything that was previously referencing that object still references that object. If a reference is set to <code>null</code>, I fold the paper to cover the box and arrow with a new box containing an <code>X</code>. For example, in (add image) the arrows of the local variables <code>list2</code> and <code>next</code> are not visible because the paper has been folded back. Similarly, the bottom of the <code>ListNode</code> on the right of (add image) has been folded up to cover the arrow and indicate that the instance variable <code>myNext</code> is <code>null</code>.",
        "count++;": "<code>this</code>, <code>list2</code>, <code>prev</code>, <code>s</code>, <code>node</code>, and <code>next</code>. If a reference is changed, I re-position the paper so that the arrow of the newly set reference now points to the correct object. If the changed reference is an instance variable, I re-position that object and ensure that anything that was previously referencing that object still references that object. If a reference is set to <code>null</code>, I fold the paper to cover the box and arrow with a new box containing an <code>X</code>. For example, in (add image) the arrows of the local variables <code>list2</code> and <code>next</code> are not visible because the paper has been folded back. Similarly, the bottom of the <code>ListNode</code> on the right of (add image) has been folded up to cover the arrow and indicate that the instance variable <code>myNext</code> is <code>null</code>.",
        "return count;": "<code>this</code>, <code>list2</code>, <code>prev</code>, <code>s</code>, <code>node</code>, and <code>next</code>. If a reference is changed, I re-position the paper so that the arrow of the newly set reference now points to the correct object. If the changed reference is an instance variable, I re-position that object and ensure that anything that was previously referencing that object still references that object. If a reference is set to <code>null</code>, I fold the paper to cover the box and arrow with a new box containing an <code>X</code>. For example, in (add image) the arrows of the local variables <code>list2</code> and <code>next</code> are not visible because the paper has been folded back. Similarly, the bottom of the <code>ListNode</code> on the right of (add image) has been folded up to cover the arrow and indicate that the instance variable <code>myNext</code> is <code>null</code>.",
        "Last, I have students write code that counts the <code>ListNode</code> objects in the <code>List</code>, and I acknowledge that it is a pretty silly task because the <code>List</code> class already has an instance variable <code>mySize</code>. I use <code>length</code> as shown in (add image) to introduce how we walk down the elements in a <code>List</code>. Again, I show the steps on a sample <code>List</code> under a document camera before translating the steps to lines of code. I point out that the variable <code>node</code> is a local variable and changing it does not change the structure of the <code>List</code>. I explain that because students will often modify a local variable when trying to modify the underlying structure of the <code>List</code>, but I don't know that my pointing it out leads to any fewer occurrences of the error.": "<code>this</code>, <code>list2</code>, <code>prev</code>, <code>s</code>, <code>node</code>, and <code>next</code>. If a reference is changed, I re-position the paper so that the arrow of the newly set reference now points to the correct object. If the changed reference is an instance variable, I re-position that object and ensure that anything that was previously referencing that object still references that object. If a reference is set to <code>null</code>, I fold the paper to cover the box and arrow with a new box containing an <code>X</code>. For example, in (add image) the arrows of the local variables <code>list2</code> and <code>next</code> are not visible because the paper has been folded back. Similarly, the bottom of the <code>ListNode</code> on the right of (add image) has been folded up to cover the arrow and indicate that the instance variable <code>myNext</code> is <code>null</code>.",
        "<iframe width=560 height=315 src=https://www.youtube.com/embed/GETckYBTvDg frameborder=0 allow=accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture allowfullscreen></iframe>": "<code>this</code>, <code>list2</code>, <code>prev</code>, <code>s</code>, <code>node</code>, and <code>next</code>. If a reference is changed, I re-position the paper so that the arrow of the newly set reference now points to the correct object. If the changed reference is an instance variable, I re-position that object and ensure that anything that was previously referencing that object still references that object. If a reference is set to <code>null</code>, I fold the paper to cover the box and arrow with a new box containing an <code>X</code>. For example, in (add image) the arrows of the local variables <code>list2</code> and <code>next</code> are not visible because the paper has been folded back. Similarly, the bottom of the <code>ListNode</code> on the right of (add image) has been folded up to cover the arrow and indicate that the instance variable <code>myNext</code> is <code>null</code>.",
    },
    "VariableAsParkingSpace": {
        "title": "Variable as a Parking Space",
        "author": "jan",
        "ProgrammingLanguage": "staticaly-typed",
        "ProgrammingParadigm": "imperative",
        "ConceptualAdvantage": "Helps understanding of why types matter both in parking spaces and in statically-typed languages",
        "Form": "Analogy",
        "DrawsAttentionTo": "The idea of a statement, a condition, and how they are used to build sequence, selection, and repetition constructs of structured programming",
        "UseWhen": "When introducing typed variables",
        "Cost": "Very small",
        "OriginSource": "self-practice",
        "image": "VariableAsParkingSpace.png",
        "Mapping:": "VariableAsParkingSpace.png",
        "variable": "parking space",
        "value": "vehicle",
        "type of variable": "vehicle size/shape/constraint on parking space",
        "type of value": "type of vehicle",
        "Topic": "Variables",
        "": "Variables",
    },
    "ProcedureAsWorker": {
        "title": "Procedure as Worker",
        "author": "ben",
        "ProgrammingLanguage": "any",
        "ProgrammingParadigm": "imperative",
        "ConceptualAdvantage": "Provides a way to visualise input and action, and later the difference between action and output. The same visualisation extended to cover user defined procedures, parameters and later to explain sub-procedure calls including recursion.",
        "Form": "Analogy",
        "DrawsAttentionTo:": "Analogy",
        "UseWhen:": "Analogy",
        "Cost:": "Analogy",
        "OriginSource": "Own practice",
        "image": "ProcedureAsWorker.jpg",
        "Mapping:": "ProcedureAsWorker.jpg",
        "procedure": "worker who knows how to do a particular job",
        "procedure call": "calling the name of the worker, so that he starts doing his particular job",
        "procedure input": "giving information to the worker (telling them in their right ear)",
        "procedure implementation": "instructions for the worker on how to do their job",
        "procedure effect": "how the worker affects the world",
        "procedure result": "what the worker speaks to the worker on their left",
        "Topic": "Functions",
        "": "Functions",
        "This notional machine was used in the following report:": "Functions",
        "<div class=item>": "Functions",
        "<div class=content>": "Functions",
        "<a class=header><a href=http://history.dcs.ed.ac.uk/archive/docs/how-to-work-the-logo-machine-dai-op-4.pdf>How to Work the LOGO Machine</a></a>": "Functions",
        "<div class=meta>": "Functions",
        "<span>du Boulay, J. B. H. & O'Shea, T.</span>": "Functions",
        "</div>": "Functions",
        "<div class=description>": "Functions",
        "<p>DAI Occasional Paper No.4  (pp. 1-145), 1976</p>": "Functions",
        "<div class=extra>": "Functions",
        "Department of Artificial Intelligence, University of Edinburgh": "Functions",
        "<p></p>": "Functions",
        "<img src=/assets/images/nm/ProcedureAsWorker-Pipeline.png class=ui fluid bordered image>": "Functions",
        "#### Chapter 2": "Functions",
        "Each procedure is like a **worker** who knows how to do a particular job": "Functions",
        "and will execute that job when commanded to by having his name called.": "Functions",
        "Some of these workers need information to be able to do their jobs.": "Functions",
        "Giving this information is called giving an **input**.": "Functions",
        "#### Chapter 9": "Functions",
        "We have described procedures as **workers**.": "Functions",
        "So far all the workes have been run because they produce some **effect**.": "Functions",
        "In most cases the effect has depended on an **input**.": "Functions",
        "They always listen for their input **from the right**.": "Functions",
        "The workers will only carry out their effect once they have the correct number of inputs.": "Functions",
        "There are other kinds of workers which do not produce an effect.": "Functions",
        "These workers use their inputs to calculate a **result** which they speak to the worker **on their left**.": "Functions",
        "We are unable to see this **result** unless we arrange for it to be the input of a worker who produces a visible effect.": "Functions",
        "The name of a procedure which only gives a **result** is `ADD`.": "Functions",
    },
    "ListAsStackOfBoxes": {
        "title": "List as Stack of Boxes",
        "author": "ben",
        "ProgrammingLanguage": "any",
        "ProgrammingParadigm": "imperative",
        "ConceptualAdvantage": "Emphasises that only the head of list (top box) or the whole list (the stack on the pallet) is directly accessible, and that new items can be added on top of a list but not into the middle of it.",
        "Form": "Analogy",
        "DrawsAttentionTo": "First-in, first-out property of a stack.",
        "UseWhen:": "First-in, first-out property of a stack.",
        "Cost:": "First-in, first-out property of a stack.",
        "OriginSource": "Own practice",
        "image": "ListAsStackOfBoxes.png",
        "Mapping:": "ListAsStackOfBoxes.png",
        "list": "stack of boxes on a pallet",
        "list element": "box on the stack",
        "[": "top of the stack",
        "]": "pallet",
        "Topic": "Stack",
        "": "Stack",
        "This notional machine was used in the following report:": "Stack",
        "<div class=item>": "Stack",
        "<div class=content>": "Stack",
        "<a class=header><a href=http://history.dcs.ed.ac.uk/archive/docs/how-to-work-the-logo-machine-dai-op-4.pdf>How to Work the LOGO Machine</a></a>": "Stack",
        "<div class=meta>": "Stack",
        "<span>du Boulay, J. B. H. & O'Shea, T.</span>": "Stack",
        "</div>": "Stack",
        "<div class=description>": "Stack",
        "<p>DAI Occasional Paper No.4  (pp. 1-145), 1976</p>": "Stack",
        "<div class=extra>": "Stack",
        "Department of Artificial Intelligence, University of Edinburgh": "Stack",
        "<p></p>": "Stack",
        "<img src=/assets/images/nm/ListAsStackOfBoxes-Report.png class=ui fluid bordered image>": "Stack",
        "### Chapter 3": "Stack",
        "The beginning of a list, the top of the stack, is marked with `[` and the end of the list, the pallet is marked with `]`.": "Stack",
        "These two characters are called **list brackets**.": "Stack",
        "We call each box of the stack an **element** of the **list**.": "Stack",
    },
    "FunctionAsBlackBox": {
        "title": "Function as Black Box",
        "author": "jan",
        "ProgrammingLanguage": "any",
        "ProgrammingParadigm": "imperative or functional",
        "ConceptualAdvantage": "Makes explicit that functions have inputs (parameters) and outputs (return value).",
        "Form": "Analogy",
        "DrawsAttentionTo": "Parameter passing and return value.",
        "UseWhen": "First introducing functions.",
        "Cost:": "First introducing functions.",
        "OriginSource": "Interview, Scott Heggen",
        "image": "FunctionAsBlackBox.jpg",
        "Mapping:": "FunctionAsBlackBox.jpg",
        "function": "black box",
        "parameters": "arrow into the box",
        "return value": "arrow out of the box",
        "Topic": "Functions",
        "": "Functions",
        "This notional machine also encourages a discussion of pure functions, for which the *only* way to communicate with the outside is to read their parameter values and to produce a return value.": "Functions",
    },
    "ExpressionAsTree-4": {
        "title": "Expression as Tree (4 - Arrays)",
        "sequence": "Expression as Tree",
        "Step": "4",
        "StepTitle": "Arrays",
        "author": "matthias",
        "ProgrammingLanguage": "Java",
        "ProgrammingParadigm": "imperative, OO",
        "ConceptualAdvantage": "Makes explicit the fact that array allocation and access are also just expressions and can be composed like any other expression.",
        "Form": "Representation",
        "DrawsAttentionTo": "The structure, typing, and evaluation of expressions involving arrays.",
        "UseWhen": "When explaining how to allocate and use arrays.",
        "Cost": "Small, can be done on paper or with a tool like Expression Tutor.",
        "OriginSource": "Own practice",
        "image": "ExpressionAsTree-4.jpg",
        "Mapping:": "ExpressionAsTree-4.jpg",
        "...": "(all aspects from 3-Objects)",
        "array allocation": "tree node with 'new', element type, and [hole] for each dimension",
        "array length": "tree node with a hole and '.length'",
        "array element access": "tree node with a hole, and [hole]",
        "Topic": "Expressions",
        "": "Determining the value of an expression</h4>",
        "The following videos and activities come from [ExpressionTutor.org](https://expressiontutor.org/), where you can find a much more comprehensive set of resources and tools.": "Expressions",
        "Expression Tutor supports many different programming languages,": "Expressions",
        "but the material discussed here is specific to Java.": "Expressions",
        "The [Crash Course": "Expressions in Java](https://expressiontutor.org/course/JavaExpressionsCrashCourse/part/Part%202) provides a learning experience that corresponds to this notional machine sequence.",
        "<h4 class=ui header>Explainer Video": "Determining the value of an expression</h4>",
        "The following video comes from section [Arrays](https://expressiontutor.org/course/JavaExpressionsCrashCourse/part/Part%202/2.4) of the Crash Course.": "Expressions Involving Arrays</h4>",
        "<iframe width=560 height=315 src=https://www.youtube-nocookie.com/embed/Hlkt5Qf-ev4 title=YouTube video player frameborder=0 allow=accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture allowfullscreen></iframe>": "Expressions Involving Arrays</h4>",
        "<h4 class=ui header>Example expressiontutor.org Activity</h4>": "Expressions Involving Arrays</h4>",
        "Here is an example Expression Tutor activity. Can you solve it?": "Expressions Involving Arrays</h4>",
        "<iframe width=100% height=904 frameborder=0 allowfullscreen src=https://expressiontutor.org/activity/do?task=615f4aea-16d1-45fe-9935-4beabcdd06d3&iframe></iframe>": "Expressions Involving Arrays</h4>",
        "<iframe width=560 height=315 src=https://www.youtube-nocookie.com/embed/oDxl4K1NZ1k title=YouTube video player frameborder=0 allow=accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture allowfullscreen></iframe>": "Where to find expressions</h4>",
        "<iframe width=560 height=315 src=https://www.youtube-nocookie.com/embed/vkG2g0bMBFo title=YouTube video player frameborder=0 allow=accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture allowfullscreen></iframe>": "Determining the type of an expression</h4>",
        "<iframe width=560 height=315 src=https://www.youtube-nocookie.com/embed/znOFVz18FuM title=YouTube video player frameborder=0 allow=accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture allowfullscreen></iframe>": "Determining the value of an expression</h4>",
    },
    "PythonComputer_4.html": {
        "title": "Python Computer (V4 - Ultimate)",
        "sequence": "Python Computer",
        "Step": "4",
        "StepTitle": "Ultimate",
        "author": "andreas",
        "ProgrammingLanguage": "Python",
        "ProgrammingParadigm": "imperative",
        "ConceptualAdvantage": "Expandable 'offline' model of program execution. In its ultimate stage (V4) it covers everything of V1, V2 and V3 plus classes, objects and methods.",
        "Form": "Representation",
        "DrawsAttentionTo": "Methods and classes.",
        "UseWhen": "Introducing object orientation (in an objects later way).",
        "Cost": "Time consuming to prepare. Easy to follow for learners, as it grows in complexity. Can be used for exercises (fill out sheets of the computer).",
        "OriginSource": "Own practice",
        "image": "PythonComputer_4.png",
        "Mapping:": "PythonComputer_4.png",
        "...": "...",
        "method": "entry in the table of sub-routines",
        "object": "entry in object table with address and value(s)",
        "Topic": "Other",
        "": "Other",
        "<p>": "Other",
        "The idea is to offer an offline (in the sense of not automated) visualization of program execution. The necessary model of the computer executing the program gets increasingly more complex, as more programming constructs are introduced.": "Other",
        "Similar ways of stepping through code can be found in the typical visualization (or debugging) tools and this connection between offline and online is intentional.": "Other",
        "</p>": "It becomes cumbersome for more than very simple scripts to create and once finished, modifications to a program are time consuming.",
        "In its basic form, the executor can run a script sequentially and jump in the script based on the evaluation of a conditional. Variables of primitive types (i.e. str, int, float, bool) are stored in a memory table that consists of identifier and current value.": "Other",
        "A template for all stages can be found <a href=https://notionalmachines.github.io/assets/misc/nm/Python Computer Template.pptx>here</a>": "Other",
        "An example for the execution of a simple script in German can be found <a href=https://notionalmachines.github.io/assets/misc/nm/PythonComputer_1_Example.pdf>here</a> (Speicher = Memory, Bezeichner = Identifier, Wert = Value, Bedingung = Condition, Nächste Zeile = Next Line).": "Other",
        "It also shows the big drawback of having it as slides only": "It becomes cumbersome for more than very simple scripts to create and once finished, modifications to a program are time consuming.",
        "The advantage is that, once introduced, it is not necessary to always step through a program from the beginning, a slide can also jump right into the middle of an execution to highlight interesting phenomena.": "It becomes cumbersome for more than very simple scripts to create and once finished, modifications to a program are time consuming.",
        "As it is manual and on slides, it is also easy to add boxes or other elements to guide students' attention to some aspect.": "It becomes cumbersome for more than very simple scripts to create and once finished, modifications to a program are time consuming.",
        "Also, the template can be used in exercises and assessments and students can fill in various aspects of the NM (e.g. the memory after a program has been run).": "It becomes cumbersome for more than very simple scripts to create and once finished, modifications to a program are time consuming.",
    },
    "CallsAsSequenceDiagram": {
        "title": "Calls as Sequence Diagram",
        "author": "matthias",
        "ProgrammingLanguage": "any",
        "ProgrammingParadigm": "object-oriented",
        "ConceptualAdvantage": "Make visible the flow of computation through method calls and returns, showing how calls relate to objects, and how calls and returns are paired.",
        "Form": "Representation",
        "DrawsAttentionTo": "The idea of a method calls being communication between two objects.",
        "UseWhen": "When introducing method calls.",
        "Cost": "Requires the introduction of this new notation.",
        "OriginSource": "Own practice, based on UML sequence diagrams",
        "image": "CallsAsSequenceDiagram.jpg",
        "Mapping:": "CallsAsSequenceDiagram.jpg",
        "method call": "solid arrow from caller activation to callee activation",
        "method return": "dashed arrow from callee activation to caller activation",
        "activation": "tall box along lifeline from call arrow to return arrow",
        "object": "box at top and lifeline down",
        "thread": "line through all calls and returns from start to finish of diagram",
        "Topic": "Functions",
        "": "Functions",
        "This representation is inspired by [UML](https://www.omg.org/spec/UML/2.5.1/About-UML/) Sequence Diagrams (which describe an interaction by showing the sequence of interchanged messages).": "Functions",
        "### Description of Notation used in Course": "Functions",
        "We use this notional machine in the course Programming Fundamentals 2": "Functions",
        "at [USI](https://www.inf.usi.ch/en),": "Functions",
        "where we teach object-oriented programming in Java.": "Functions",
        "Assume the following classes:": "Functions",
        "```java": "Functions",
        "public class Game {": "Functions",
        "private Pacman p = new Pacman();": "Functions",
        "private Ghost g1 = new Ghost(p);": "Functions",
        "private Ghost g2 = new Ghost(p);": "Functions",
        "public void simulateStep() {": "Functions",
        "p.step();": "Functions",
        "g1.step();": "Functions",
        "g2.step();": "Functions",
        "}": "Functions",
        "```": "Functions",
        "public class Pacman {": "Functions",
        "public void step() {": "Functions",
        "public int distanceTo(Ghost g) {": "Functions",
        "return ...;  // somehow compute distance between this and g": "Functions",
        "public void kill() {": "Functions",
        "decrementLives();": "Functions",
        "new Pill();": "Functions",
        "public void decrementLives() {": "Functions",
        "public class Ghost {": "Functions",
        "private Pacman p;": "Functions",
        "public Ghost(Pacman p) {": "Functions",
        "this.p = p;": "Functions",
        "if (p.distanceTo(this)==0) {": "Functions",
        "p.kill();": "Functions",
        "public class Pill {": "Functions",
        "This sequence diagram represents what could happen in a call to `Game.simulateStep()`:": "Functions",
        "<img class=ui centered image src=/assets/images/nm/CallsAsSequenceDiagram-description.png>": "Functions",
        "#### Sequence Diagrams": "Functions",
        "A sequence diagram shows the execution of a program during a certain period of time (not necessarily starting when the program starts, but starting when a certain method gets called). In the diagram, time goes from the top to the bottom.": "Functions",
        "#### Objects and Life Lines": "Functions",
        "At the top of the diagram, draw a box for each object that already exists when the period of time represented by the diagram starts. Starting from the bottom of each box, draw a life line that represents the life of the object. If an object does not yet exist at the beginning, but gets created in the middle of the execution, its box appears somewhere between the top and bottom of the diagram, and its life line also starts from the bottom of its box. For any object, the life line ends at the point in time the object dies (or at the bottom of the diagram, if the object survives the duration of the diagram). In Java, we can consider that an object dies when it becomes unreachable (when there are no more references to it).": "Functions",
        "#### Method Calls and Returns": "Functions",
        "Besides the objects and their life lines, the diagram also shows method invocations and returns. Each invocation is shown with a solid arrow, from the calling object to the called object. The corresponding return is shown with a dashed arrow, from the called object back to the calling object.": "Functions",
        "An object may call a method on itself (e.g., `this.m()` or just `m()`). In this case the call and the return arrow start from the object's lifeline and end at the same object's lifeline.": "Functions",
        "#### A Note on Recursion": "Functions",
        "Note that an object calling a method on itself (e.g., `o.m()` calling `o.n()`) does **not** necessarily mean that there is a recursive method call! There only is recursion if a **method** calls itself (e.g., `o.m()` calling `o.m()`). This is different from some method of an object calling a (potentially different) method of the same object. In fact, we can have recursion also when we call the same method on a different object (`o.m()` calling `p.m()`).": "Functions",
        "### Example Usage on Whiteboard": "Functions",
        "Note that when using this notional machine in class,": "Functions",
        "we often deviate somewhat from the description above,": "Functions",
        "either to focus on a specific issue, or to save time.": "Functions",
        "In the example below, we wanted to highlight two things:": "Functions",
        "* **Calls and returns are paired**.": "Functions",
        "For every call there is a corresponding return": "Functions",
        "(later in the course, when introduce exception handling,": "Functions",
        "we will have to refine this rule).": "Functions",
        "To focus on this issue,": "Functions",
        "we use more emphasized styles for call and return arrows:": "Functions",
        "calls are solid red arrows,": "Functions",
        "and returns are dashed green arrows.": "Functions",
        "* At any point in time **only one method is actively executing**": "Functions",
        "(and that method has its stack frame on top of the call stack),": "Functions",
        "while all other activated methods are waiting for their caller to return.": "Functions",
        "Thus, at any given time, we highlight in yellow": "Functions",
        "the activation record of the executing method.": "Functions",
        "<img src=/assets/images/nm/CallsAsSequenceDiagram-full.jpg class=ui fluid bordered image>": "Functions",
    },
    "HashSetAsHangingFolders.html": {
        "title": "Hash Set as Hanging Folders",
        "author": "colleen",
        "ProgrammingLanguage": "Java",
        "ProgrammingParadigm": "imperative",
        "ConceptualAdvantage": "Explains need for hashCode() and equals() methods when using HashSet",
        "Form": "Analogy",
        "DrawsAttentionTo": "Need for .hashCode() and .equals(Object o) methods",
        "UseWhen": "Teaching students to use the built-in HashSet Java library class",
        "Cost": "Used in class for ~10 minutes, but requires having a file folder bin",
        "OriginSource": "Own practice",
        "image": "HashSetAsHangingFolders2.jpg",
        "Mapping:": "HashSetAsHangingFolders2.jpg",
        "HashSet": "Box of hanging folders",
        "bucket": "Single file folder",
        "key": "Piece of paper in a file folder",
        "value": "N/A (HashSet, not HashMap)",
        "add(key) method": "Find correct folder, check if the folder already contains the key by comparing the key to all contents of the folder",
        "Topic": "Other",
        "": "<code>hashCode of Bear is 2066388</code></li>",
        "<p>": "</b> I just start with <code>HashSet</code> because it is simpler. I find that students don't have trouble translating what they learned to understand <code>HashMap</code> in Java.",
        "<b>Instructional Context:</b> I teach a post-secondary course in which students learn about data structures and learn to program in Java and Racket. My lectures are twice a week for 75 minutes. My enrollment ranges from 50 to 150 students in each lecture section. I typically lecture for 5 to 10 minutes and then have students work in pairs to try to apply the newly introduce idea.": "Other",
        "</p>": "<code>hashCode of Bear is 2066388</code></li>",
        "<b>Use Why:</b> I find that students think Hash Tables are baffling. It isn't that they have trouble <i>using</i> them, but they report not understanding them. I don't have a perfect explaination for what they think they don't understand, but since I've started using this technique, I've stopped getting the complaints that Hash Tables make no sense! Maybe the problem was just that I wasn't explaining them very well before!": "Other",
        "<b>Learning Goal": "</b> This explanation is focused on helping students to understand <i>why</i> we need to provide a <code>hashCode()</code> and <code>equals(Object o)</code> when they work with the library class <code>HashSet</code> in Java. In getting at <i>why</i> we need these it also introduces <i>how</i> a <code>HashSet</code> in Java works (assuming chaining), but I don't test students on <i>how</i> a <code>HashSet</code> works.",
        "<b>Why HashSet and not HashMap?": "</b> I just start with <code>HashSet</code> because it is simpler. I find that students don't have trouble translating what they learned to understand <code>HashMap</code> in Java.",
        "<b>Instructional Sequence Overview:</b> I trace through what would happen with the following code that attempts to add 7 <code>Strings</code> to a <code>HashSet</code>. First, the code will add 3 <code>String</code>s (<code>Bear Zebra Tiger</code>) that each go in different buckets (i.e., folders). Second, we'll try to add something that's already in the <code>HashSet</code>. Finally, then we'll add three <code>String</code>s (<code>Orange Dog Zoo</code>) that all go in the same bucket (i.e., folder). This allows students to see a collision where the item is <code>.equals</code> and two where they are not.": "</b> I just start with <code>HashSet</code> because it is simpler. I find that students don't have trouble translating what they learned to understand <code>HashMap</code> in Java.",
        "<pre>": "<code>hashCode of Bear is 2066388</code></li>",
        "import java.util.HashSet;": "</b> I just start with <code>HashSet</code> because it is simpler. I find that students don't have trouble translating what they learned to understand <code>HashMap</code> in Java.",
        "public class FileFolderHashSet {": "</b> I just start with <code>HashSet</code> because it is simpler. I find that students don't have trouble translating what they learned to understand <code>HashMap</code> in Java.",
        "public static void main(String[] args) {": "<code>hashCode of Bear is 2066388</code></li>",
        "HashSet<String> folders = new HashSet<String>();": "</b> I just start with <code>HashSet</code> because it is simpler. I find that students don't have trouble translating what they learned to understand <code>HashMap</code> in Java.",
        "folders.add(Bear);": "</b> I just start with <code>HashSet</code> because it is simpler. I find that students don't have trouble translating what they learned to understand <code>HashMap</code> in Java.",
        "folders.add(Zebra);": "</b> I just start with <code>HashSet</code> because it is simpler. I find that students don't have trouble translating what they learned to understand <code>HashMap</code> in Java.",
        "folders.add(Tiger);": "</b> I just start with <code>HashSet</code> because it is simpler. I find that students don't have trouble translating what they learned to understand <code>HashMap</code> in Java.",
        "folders.add(Orange);": "</b> I just start with <code>HashSet</code> because it is simpler. I find that students don't have trouble translating what they learned to understand <code>HashMap</code> in Java.",
        "folders.add(Dog);": "</b> I just start with <code>HashSet</code> because it is simpler. I find that students don't have trouble translating what they learned to understand <code>HashMap</code> in Java.",
        "folders.add(Zoo);": "</b> I just start with <code>HashSet</code> because it is simpler. I find that students don't have trouble translating what they learned to understand <code>HashMap</code> in Java.",
        "}": "<code>hashCode of Bear is 2066388</code></li>",
        "</pre>": "<code>hashCode of Bear is 2066388</code></li>",
        "<iframe width=560 height=315 src=https://www.youtube.com/embed/TcKtHzDe6Qo frameborder=0 allow=accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture allowfullscreen></iframe>": "</b> I just start with <code>HashSet</code> because it is simpler. I find that students don't have trouble translating what they learned to understand <code>HashMap</code> in Java.",
        "<b>Tracing one call to the <code>add</code> method:</b> This involves going through the following numbered steps. The first time I trace <code>add</code> I say all of the bullets under each step. Tracing through the <code>add</code> method after the first time, I still do each step, but I don't say all of the bullets.": "</b> I just start with <code>HashSet</code> because it is simpler. I find that students don't have trouble translating what they learned to understand <code>HashMap</code> in Java.",
        "<ol>": "</b> I just start with <code>HashSet</code> because it is simpler. I find that students don't have trouble translating what they learned to understand <code>HashMap</code> in Java.",
        "<li>Read a line of code from the class <code>FileFolderHashSet</code> above (e.g., <code>folders.add(Bear);</code>).": "</b> I just start with <code>HashSet</code> because it is simpler. I find that students don't have trouble translating what they learned to understand <code>HashMap</code> in Java.",
        "<ul>": "<code>hashCode of Bear is 2066388</code></li>",
        "<li><i>I'm a <code>HashSet</code> named <code>folder</code> and someone wants to add the <code>String Bear</code>.</i></li>": "</b> I just start with <code>HashSet</code> because it is simpler. I find that students don't have trouble translating what they learned to understand <code>HashMap</code> in Java.",
        "</ul>": "<code>hashCode of Bear is 2066388</code></li>",
        "</li>": "<code>hashCode of Bear is 2066388</code></li>",
        "<li> Write the <code>String</code> on a piece of paper.": "</b> I just start with <code>HashSet</code> because it is simpler. I find that students don't have trouble translating what they learned to understand <code>HashMap</code> in Java.",
        "<li>Here's the <code>String</code> that I need to store, but I need a reliable way to remember where I put it.</li>": "</b> I just start with <code>HashSet</code> because it is simpler. I find that students don't have trouble translating what they learned to understand <code>HashMap</code> in Java.",
        "<li>First, I need to know what <code>hashCode()</code> returns for the <code>String Bear</code>.</li>": "</b> I just start with <code>HashSet</code> because it is simpler. I find that students don't have trouble translating what they learned to understand <code>HashMap</code> in Java.",
        "<li>Modify the code in the class <code>HashCodeTest</code> below (e.g., <code>String s = Bear;</code>).": "</b> I just start with <code>HashSet</code> because it is simpler. I find that students don't have trouble translating what they learned to understand <code>HashMap</code> in Java.",
        "<li>The <code>add</code> method in the <code>HashSet</code> class always calls <code>hashCode()</code> on the object it was passed.</li>": "</b> I just start with <code>HashSet</code> because it is simpler. I find that students don't have trouble translating what they learned to understand <code>HashMap</code> in Java.",
        "<li>We'll use the <code>HashCodeTest</code> class to figure out what <code>hashCode()</code> would return for the <code>String Bear</code>.</li>": "</b> I just start with <code>HashSet</code> because it is simpler. I find that students don't have trouble translating what they learned to understand <code>HashMap</code> in Java.",
        "<li>Run the code in the class <code>HashCodeTest</code> to get a value for the call to <code>hashCode()</code>.": "</b> I just start with <code>HashSet</code> because it is simpler. I find that students don't have trouble translating what they learned to understand <code>HashMap</code> in Java.",
        "<li>The program printed": "<code>hashCode of Bear is 2066388</code></li>",
        "<li>Remember, I want to store the <code>String Bear</code>, but I need to remember where I put it. </li>": "<code>hashCode of Bear is 2066388</code></li>",
        "<li>I have 10 folders, so I'll use the last digit of the <code>hashCode</code> to decide what folder to put it in.</li>": "<code>hashCode of Bear is 2066388</code></li>",
        "<li>I could have used a different scheme as long as I was consistent!</li>": "<code>hashCode of Bear is 2066388</code></li>",
        "<li>Pull out the relevant folder (e.g., folder 8 for <code>Bear</code>).": "<code>hashCode of Bear is 2066388</code></li>",
        "<li>I want to store the <code>String Bear</code> here, but I need to make sure I haven't already stored the <code>String Bear</code>.</li>": "<code>hashCode of Bear is 2066388</code></li>",
        "<li>If the folder is empty, add the piece of paper with the <code>String</code> written on it.": "<code>hashCode of Bear is 2066388</code></li>",
        "<li>Cool - I don't have anything in this folder. I can just add it.</li>": "<code>hashCode of Bear is 2066388</code></li>",
        "<li>What's most important is that I have a repeatable process so I coudl find it again.</li>": "<code>hashCode of Bear is 2066388</code></li>",
        "<li>If the folder is not empty, pull out all of the papers from the relevant folder.": "<code>hashCode of Bear is 2066388</code></li>",
        "<li>Okay - I need look at each paper and call <code>.equals</code> with it to see if I have already added it. If it’s no already there, I add the new paper.</li>": "<code>hashCode of Bear is 2066388</code></li>",
        "</ol>": "<code>hashCode of Bear is 2066388</code></li>",
        "public class HashCodeTest {": "<code>hashCode of Bear is 2066388</code></li>",
        "String s = Bear;": "<code>hashCode of Bear is 2066388</code></li>",
        "System.out.println(hashCode of \\ + s + \\ is  + s.hashCode());": "<code>hashCode of Bear is 2066388</code></li>",
        "<p><b><code>HashCode</code> values</b> Here are the values returned for each <code>String</code> as printed by the class <code>HashCodeTest</code>:": "<code>hashCode of Bear is 2066388</code></li>",
        "<li><code>hashCode of Bear is 2066388</code></li>": "<code>hashCode of Bear is 2066388</code></li>",
        "<li><code>hashCode of Zebra is 86223590</code></li>": "<code>hashCode of Bear is 2066388</code></li>",
        "<li><code>hashCode of Tiger is 80806047</code></li>": "<code>hashCode of Bear is 2066388</code></li>",
        "<li><code>hashCode of Orange is -1924984242</code></li>": "<code>hashCode of Bear is 2066388</code></li>",
        "<li><code>hashCode of Dog is 68892</code></li>": "<code>hashCode of Bear is 2066388</code></li>",
        "<li><code>hashCode of Zoo is 90042</code></li>": "<code>hashCode of Bear is 2066388</code></li>",
    },
    "GrammarAsTrainTrack": {
        "title": "Grammar as Train Track",
        "author": "matthias",
        "ProgrammingLanguage": "BNF / EBNF",
        "ProgrammingParadigm": "declarative",
        "ConceptualAdvantage": "Pushing a train engine through the track makes visible the process of interpretation (generation or parsing) of the grammar (that is the track).",
        "Form": "Analogy",
        "DrawsAttentionTo": "The process of parsing or generating driven by a grammar.",
        "UseWhen": "Introducing formal grammars (BNF / EBNF).",
        "Cost": "Space to build train track (non-trivial grammars will need multiple large tables or significant floor space).",
        "OriginSource": "Own practice, based on 'railroad diagrams'",
        "image": "GrammarAsTrainTrack.jpg",
        "Mapping:": "GrammarAsTrainTrack.jpg",
        "grammar rule": "a train track with a start and an end",
        "parsing or generating": "pushing a train engine through the train track",
        "terminal symbol (in a grammar rule)": "tunnel representing a terminal symbol, generating or recognizing the text with which it is labeled",
        "non-terminal symbol (in a grammar rule)": "tunnel representing a non-terminal symbol, invoking the rule mentioned on its label",
        "sequence": "track segment going from one tunnel to the next",
        "selection": "two switches to split and join the track, requiring the train engine to decide which track to take",
        "repetition": "two switches allowing the train engine to go back and repeat a part of the grammar multiple times",
        "Topic": "Other",
        "": "Other",
        "The idea is described under the name Language Trains,": "Other",
        "one of three different programming languages that strive to eliminate abstraction, in the following paper:": "Other",
        "{% include paper.html": "Other",
        "authors=Matthias Hauswirth, Andrea Adamoli, and Mohammad Azadmanesh": "Other",
        "url=https://dl.acm.org/doi/10.1145/3141880.3141894": "Other",
        "title=The Program is the System": "Other",
        "publication=Koli Calling '17 %}": "Other",
        "This notional machine was used to explain grammars to high school students and the general public in the 10-year anniversary exhibition": "Other",
        "of the Faculty of Informatics of USI.": "Other",
        "It was further used, in a virtual form, in a [course on programming language concepts](https://informa.inf.usi.ch/course/pithn7zetALFSrLsF/themes) for high school informatics teachers in the Swiss state of Ticino:": "Other",
        "<img src=/assets/images/nm/GrammarAsTrainTracks1.png class=ui fluid bordered image>": "Other",
        "<img src=/assets/images/nm/GrammarAsTrainTracks2.png class=ui fluid bordered image>": "Other",
        "<img src=/assets/images/nm/GrammarAsTrainTracks3.png class=ui fluid bordered image>": "Other",
        "### Usage Note": "Other",
        "Non-terminal symbols appearing in a grammar rule mean that one has to take an additional train engine to start processing the rule of that non-terminal (i.e., one needs multiple train engines, and it can be confusing to understand which prior engine to go back to when one finishes the track of a rule).": "Other",
    },
    "FunctionAsTank": {
        "title": "Function as Tank",
        "author": "matthias",
        "ProgrammingLanguage": "any",
        "ProgrammingParadigm": "imperative or functional",
        "ConceptualAdvantage": "Makes explicit that functions have inputs (parameters) and outputs (return value).",
        "Form": "Analogy",
        "DrawsAttentionTo": "Parameter passing and return value.",
        "UseWhen": "First introducing functions.",
        "Cost:": "First introducing functions.",
        "OriginSource": "Book, Brian Harvey",
        "image": "FunctionAsTank.png",
        "Mapping:": "FunctionAsTank.png",
        "function": "tank",
        "parameters": "hoppers on top of tank",
        "return value": "output pipe on bottom of tank",
        "Topic": "Functions",
        "": "Symbolic Computing](https://mitpress.mit.edu/books/computer-science-logo-style-second-edition-volume-1)",
        "Brian Harvey also calls this notional machine Plumbing Diagram.": "Functions",
        "He uses it in his book,": "Functions",
        "[Computer Science Logo Style": "Symbolic Computing](https://mitpress.mit.edu/books/computer-science-logo-style-second-edition-volume-1)",
        "(Chapter 2, Procedures, [PDF](https://people.eecs.berkeley.edu/~bh/pdf/v1ch02.pdf)).": "Symbolic Computing](https://mitpress.mit.edu/books/computer-science-logo-style-second-edition-volume-1)",
        "The following example shows LOGO code and the corresponding plumbing diagram:": "Symbolic Computing](https://mitpress.mit.edu/books/computer-science-logo-style-second-edition-volume-1)",
        "```logo": "Symbolic Computing](https://mitpress.mit.edu/books/computer-science-logo-style-second-edition-volume-1)",
        "print word sum 2 4 es": "Symbolic Computing](https://mitpress.mit.edu/books/computer-science-logo-style-second-edition-volume-1)",
        "```": "Symbolic Computing](https://mitpress.mit.edu/books/computer-science-logo-style-second-edition-volume-1)",
        "<img src=/assets/images/nm/FunctionAsTank.png class=ui bordered image>": "Symbolic Computing](https://mitpress.mit.edu/books/computer-science-logo-style-second-edition-volume-1)",
        "The book introduces the diagram as follows:": "Symbolic Computing](https://mitpress.mit.edu/books/computer-science-logo-style-second-edition-volume-1)",
        "> Using the output from one procedure as an input to another procedure": "Symbolic Computing](https://mitpress.mit.edu/books/computer-science-logo-style-second-edition-volume-1)",
        "> is called composition of functions.": "Symbolic Computing](https://mitpress.mit.edu/books/computer-science-logo-style-second-edition-volume-1)",
        "> Some people find it helpful to look at a pictorial form of this analysis.": "Symbolic Computing](https://mitpress.mit.edu/books/computer-science-logo-style-second-edition-volume-1)",
        "> We can represent each procedure as a kind of tank,": "Symbolic Computing](https://mitpress.mit.edu/books/computer-science-logo-style-second-edition-volume-1)",
        "> with input hoppers on top and perhaps an output pipe at the bottom.": "Symbolic Computing](https://mitpress.mit.edu/books/computer-science-logo-style-second-edition-volume-1)",
        "> (This organization makes sense because gravity will pull the information downward.)": "Symbolic Computing](https://mitpress.mit.edu/books/computer-science-logo-style-second-edition-volume-1)",
        "> ...": "Symbolic Computing](https://mitpress.mit.edu/books/computer-science-logo-style-second-edition-volume-1)",
        "> We can put these parts together to form a kind of “plumbing diagram” of the instruction.": "Symbolic Computing](https://mitpress.mit.edu/books/computer-science-logo-style-second-edition-volume-1)",
        "> In that diagram the output pipes from one procedure": "Symbolic Computing](https://mitpress.mit.edu/books/computer-science-logo-style-second-edition-volume-1)",
        "> are connected to the input hoppers of another.": "Symbolic Computing](https://mitpress.mit.edu/books/computer-science-logo-style-second-edition-volume-1)",
        "> Every pipe must be connected to something.": "Symbolic Computing](https://mitpress.mit.edu/books/computer-science-logo-style-second-edition-volume-1)",
        "> The inputs that are explicitly given as numbers in the instruction": "Symbolic Computing](https://mitpress.mit.edu/books/computer-science-logo-style-second-edition-volume-1)",
        "> are shown with arrows pointing into the hoppers.": "Symbolic Computing](https://mitpress.mit.edu/books/computer-science-logo-style-second-edition-volume-1)",
        ">": "Symbolic Computing](https://mitpress.mit.edu/books/computer-science-logo-style-second-edition-volume-1)",
        "> You can annotate the diagram by indicating the actual information that flows through each pipe.": "Symbolic Computing](https://mitpress.mit.edu/books/computer-science-logo-style-second-edition-volume-1)",
    },
    "PhysicalJava-2-PhysicalObjects": {
        "title": "Physical Java (2. Physical Objects)",
        "sequence": "Physical Java",
        "Step": "2",
        "StepTitle": "Physical Objects",
        "author": "colleen",
        "ProgrammingLanguage": "Java",
        "ProgrammingParadigm": "imperative",
        "ConceptualAdvantage": "Ignores instance variables when first introducing objects.",
        "Form": "Representation",
        "DrawsAttentionTo": "Creation of objects and aliasing.",
        "UseWhen": "When introducing constructor calls and non-static methods in Java.",
        "Cost": "Creating the physical model is a lot of work.",
        "OriginSource": "Own practice",
        "image": "PhysicalJava-2.jpg",
        "Mapping:": "PhysicalJava-2.jpg",
        "...": "(all aspects of Physical Java 1)",
        "object": "a small stuffed animal with a resemblance to the name of the object",
        "instance variables": "(not represented)",
        "Topic": "Objects",
    },
    "VariableAsClothespin": {
        "title": "Variable as Clothespin",
        "author": "felienne",
        "ProgrammingLanguage": "any",
        "ProgrammingParadigm": "imperative",
        "ConceptualAdvantage": "Makes variable tangible, helps prevent multiple values misconception",
        "Form": "Representation",
        "DrawsAttentionTo": "Variables contain *one* value",
        "Cost": "Low",
        "OriginSource": "Interview, Emily Bakker.",
        "image": "VariableAsClothespin.png",
        "Mapping:": "VariableAsClothespin.png",
        "variable": "clothespin",
        "variable name": "label on the pin",
        "value": "paper sheet in the pin",
        "Topic": "Variables",
    },
    "ExpressionAsTree-1": {
        "title": "Expression as Tree (1 - Arithmetic)",
        "sequence": "Expression as Tree",
        "Step": "1",
        "StepTitle": "Arithmetic",
        "author": "matthias",
        "ProgrammingLanguage": "Java",
        "ProgrammingParadigm": "imperative, OO",
        "ConceptualAdvantage": "A large fraction of code consists of expressions. Students already know about expressions from school arithmetic. This notional machine makes the structure of such simple expressions explicit,",
        "and provides a way to explain their bottom-up step-by-step evaluation.": "A large fraction of code consists of expressions. Students already know about expressions from school arithmetic. This notional machine makes the structure of such simple expressions explicit,",
        "Form": "Representation",
        "DrawsAttentionTo": "The structure, typing, and evaluation of arithmetic expressions students still know from school.",
        "UseWhen": "To reason about the structure and semantics of simple arithmetic expressions.",
        "Cost": "Small, can be done on paper or with a tool like Expression Tutor.",
        "OriginSource": "Own practice",
        "image": "ExpressionAsTree-1.jpg",
        "Mapping:": "ExpressionAsTree-1.jpg",
        "expression": "tree of nodes linked together",
        "operator": "green node",
        "operand": "hole in a node where a child node can be attached",
        "subexpression inside expression": "subtree connected to a node's hole",
        "type of subexpression": "blue tag above subexpressions's root node",
        "numerical literal": "tree node labeled with the number",
        "variable": "tree node labeled with name of variable of a numeric type",
        "unary arithmetic operator (+, -)": "tree node with operator in front of a hole",
        "binary arithmetic operator (+, -, *, /, %)": "tree node with operator between two holes",
        "Topic": "Expressions",
        "": "Determining the value of an expression</h4>",
        "The following videos and activities come from [ExpressionTutor.org](https://expressiontutor.org/), where you can find a much more comprehensive set of resources and tools.": "Expressions",
        "Expression Tutor supports many different programming languages,": "Expressions",
        "but the material discussed here is specific to Java.": "Expressions",
        "The [Crash Course": "Expressions in Java](https://expressiontutor.org/course/JavaExpressionsCrashCourse/part/Part%202) provides a learning experience that corresponds to this notional machine sequence.",
        "<h4 class=ui header>Explainer Video": "Determining the value of an expression</h4>",
        "The following video comes from section [Arithmetic](https://expressiontutor.org/course/JavaExpressionsCrashCourse/part/Part%202/2.1) of the Crash Course.": "Basic Arithmetic Expressions</h4>",
        "<iframe width=560 height=315 src=https://www.youtube-nocookie.com/embed/ac8L-GsuvgQ title=YouTube video player frameborder=0 allow=accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture allowfullscreen></iframe>": "Basic Arithmetic Expressions</h4>",
        "<h4 class=ui header>Example expressiontutor.org Activity</h4>": "Basic Arithmetic Expressions</h4>",
        "Here is an example Expression Tutor activity. Can you solve it?": "Basic Arithmetic Expressions</h4>",
        "<iframe width=100% height=904 frameborder=0 allowfullscreen src=https://expressiontutor.org/activity/do?task=81d768cd-87fa-4277-be4c-fa9268d3799a&iframe></iframe>": "Basic Arithmetic Expressions</h4>",
        "<iframe width=560 height=315 src=https://www.youtube-nocookie.com/embed/oDxl4K1NZ1k title=YouTube video player frameborder=0 allow=accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture allowfullscreen></iframe>": "Where to find expressions</h4>",
        "<iframe width=560 height=315 src=https://www.youtube-nocookie.com/embed/vkG2g0bMBFo title=YouTube video player frameborder=0 allow=accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture allowfullscreen></iframe>": "Determining the type of an expression</h4>",
        "<iframe width=560 height=315 src=https://www.youtube-nocookie.com/embed/znOFVz18FuM title=YouTube video player frameborder=0 allow=accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture allowfullscreen></iframe>": "Determining the value of an expression</h4>",
    },
    "ControlFlowAsGraph-5-Repetition.html": {
        "title": "Control Flow as Graph (5 - Repetition)",
        "sequence": "Control Flow as Graph",
        "Step": "5",
        "StepTitle": "Repetition",
        "author": "matthias",
        "ProgrammingLanguage": "Java",
        "ProgrammingParadigm": "imperative",
        "ConceptualAdvantage": "Understand concept of repetition from structured programming (loops like while, do-while, or for), where a given statement can be executed multiple times, by simply following the arrows through the cycle.",
        "Form": "Representation",
        "DrawsAttentionTo": "The idea of a 'repetition' in structured programming, where control-flow leads to statements getting executed multiple times",
        "UseWhen": "When introducing while-, do-while-, and for-loops",
        "Cost": "Requires prior introduction of 'Selection'.",
        "OriginSource": "Compilers (control-flow graphs) and flow charts",
        "image": "ControlFlowAsGraph-5-Repetition.jpg",
        "Mapping:": "ControlFlowAsGraph-5-Repetition.jpg",
        "...": "...",
        "back edge": "arrow pointing to a node that came prior in the flow (introducing a cycle)",
        "while-, do-while-, for-loop": "cycle in the graph",
        "Topic": "ControlFlow",
        "": "ControlFlow",
        "<p>": "ControlFlow",
        "This is the last in a sequence of Control Flow as Graph notional machines:": "ControlFlow",
        "</p>": "ControlFlow",
        "<ol>": "ControlFlow",
        "<li><a href=ControlFlowAsGraph-1-Sequence.html>Sequence</a></li>": "ControlFlow",
        "<li><a href=ControlFlowAsGraph-2-Selection.html>Selection</a></li>": "ControlFlow",
        "<li><a href=ControlFlowAsGraph-3-MultiWaySelection.html>Multi-Way Selection</a></li>": "ControlFlow",
        "<li><a href=ControlFlowAsGraph-4-ShortCircuit.html>Short-Circuit</a></li>": "ControlFlow",
        "<li>Repetition</li>": "ControlFlow",
        "</ol>": "ControlFlow",
        "The following video Matthias Hauswirth uses the Control Flow as Graph": "ControlFlow",
        "notional machine in his Programming Fundamentals 2 Bachelor course": "ControlFlow",
        "to explain <code>for</code>-loops in Java:": "ControlFlow",
        "<iframe width=854 height=480 src=https://www.youtube.com/embed/DGwBuMvLYp4 frameborder=0 allow=accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture allowfullscreen></iframe>": "ControlFlow",
        "<h3>More Information</h3>": "ControlFlow",
        "This notional machine is implemented by the Informa Clicker tool.": "ControlFlow",
        "This tool allows students in a classroom to construct control flow graphs": "ControlFlow",
        "in in-class clicker exercises.": "ControlFlow",
        "{% include paper.html": "ControlFlow",
        "authors=Matthias Hauswirth and Andrea Adamoli": "ControlFlow",
        "url=https://dl.acm.org/doi/10.1145/1596655.1596657": "ControlFlow",
        "title=Solve & Evaluate with Informa": "A Java-based Classroom Response System for Teaching Java",
        "publication=PPPJ '09 %}": "A Java-based Classroom Response System for Teaching Java",
    },
    "ControlFlowAsStructuredCodeAnnotations-2": {
        "title": "Control Flow as Structured Code Annotations (2 - Dynamic Behavior)",
        "sequence": "Control Flow as Structured Code Annotations",
        "Step": "2",
        "StepTitle": "Dynamic Behavior",
        "author": "peter",
        "ProgrammingLanguage": "any",
        "ProgrammingParadigm": "imperative",
        "ConceptualAdvantage": "The notional machine is not an entirely separate representation from the code but acts as a secondary notation to add invisible aspects of the code execution.",
        "Form": "Representation",
        "DrawsAttentionTo": "Dynamic view of control flow (actual execution); evaluation of expressions; declaration, initialisation, access and assignment of variables.",
        "UseWhen": "Developing understanding of how basic programming constructs work.",
        "Cost": "Code needs carefully selected and formatted to enable annotation.",
        "OriginSource": "Own practice, Peter Donaldson and Quintin Cutts",
        "image": "ControlFlowAsStructuredCodeAnnotations-2.png",
        "Mapping:": "ControlFlowAsStructuredCodeAnnotations-2.png",
        "...": "(all aspects from 1-Static Structure)",
        "instruction execution": "add current step number to arrow leading in, then execute by adding to or looking up information in memory table, expression evaluator, or output areas",
        "expression evaluation": "copy expression, substitute values, and evaluate it in expression evaluation area",
        "variable declaration": "find first blank column in memory table and add name of variable in first row; value added underneath if initialised",
        "variable assignment": "find variable in the memory table, strike through existing entry, and add entry to row below.",
        "conditionals and loops": "evaluate control expression to 'True' or 'False', then follow relevant labelled control path to next instruction",
        "Topic": "ControlFlow",
        "": "ControlFlow",
        "Created by Peter Donaldson and Quintin Cutts /": "ControlFlow",
        "[PLAN C project](https://trace.dcs.gla.ac.uk/planc/).": "ControlFlow",
        "{% include paper.html": "ControlFlow",
        "authors=Peter Donaldson and Quintin Cutts": "ControlFlow",
        "url=https://dl.acm.org/doi/10.1145/3265757.3265776": "ControlFlow",
        "title=Flexible Low-cost Activities to Develop Novice Code Comprehension Skills in Schools": "ControlFlow",
        "publication=WiPSCE '19 %}": "ControlFlow",
        "### Two stages to TRACS trace": "ControlFlow",
        "First, mark code with control flow paths and parts of the code containing expressions. Second, start at the top of the program and execute each line adding or looking up any necessary information from the memory table, expression evaluation or output areas.": "ControlFlow",
        "<img src=/assets/images/nm/ControlFlowAsStructuredCodeAnnotations-full.png class=ui fluid bordered image>": "ControlFlow",
    },
    "ExpressionAsTree-5": {
        "title": "Expression as Tree (4 - Comparisons & Conditionals)",
        "sequence": "Expression as Tree",
        "Step": "5",
        "StepTitle": "Comparisons & Conditionals",
        "author": "matthias",
        "ProgrammingLanguage": "Java",
        "ProgrammingParadigm": "imperative, OO",
        "ConceptualAdvantage": "Makes explicit the fact that comparisons are just expressions (they produce a boolean value), and that one can construct expressions with the ternary conditional operator (providing a boolean value as the first operand).",
        "Form": "Representation",
        "DrawsAttentionTo": "The structure, typing, and evaluation of expressions involving comparisons and conditionals.",
        "UseWhen": "When explaining comparisons (e.g., when introducing conditional statements and loops) and conditional expressions.",
        "Cost": "Small, can be done on paper or with a tool like Expression Tutor.",
        "OriginSource": "Own practice",
        "image": "ExpressionAsTree-5.jpg",
        "Mapping:": "ExpressionAsTree-5.jpg",
        "...": "(all aspects from 4-Arrays)",
        "binary comparison operator (==, !=, <, <=, >=, >)": "tree node with operator between two holes",
        "ternary conditional operator (?:)": "tree node with a hole for the condition, '?', a hole for the then-value, ':', and a hole for the else-value",
        "Topic": "Expressions",
        "": "Determining the value of an expression</h4>",
        "The following videos and activities come from [ExpressionTutor.org](https://expressiontutor.org/), where you can find a much more comprehensive set of resources and tools.": "Expressions",
        "Expression Tutor supports many different programming languages,": "Expressions",
        "but the material discussed here is specific to Java.": "Expressions",
        "The [Crash Course": "Expressions in Java](https://expressiontutor.org/course/JavaExpressionsCrashCourse/part/Part%202) provides a learning experience that corresponds to this notional machine sequence.",
        "<h4 class=ui header>Explainer Video": "Determining the value of an expression</h4>",
        "The following video comes from section [Comparisons & Conditionals](https://expressiontutor.org/course/JavaExpressionsCrashCourse/part/Part%202/2.5) of the Crash Course.": "Comparisons &amp; Conditionals</h4>",
        "<iframe width=560 height=315 src=https://www.youtube-nocookie.com/embed/ZY7sWKIPFxY title=YouTube video player frameborder=0 allow=accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture allowfullscreen></iframe>": "Comparisons &amp; Conditionals</h4>",
        "<h4 class=ui header>Example expressiontutor.org Activity</h4>": "Comparisons &amp; Conditionals</h4>",
        "Here is an example Expression Tutor activity. Can you solve it?": "Comparisons &amp; Conditionals</h4>",
        "<iframe width=100% height=904 frameborder=0 allowfullscreen src=https://expressiontutor.org/activity/do?task=615f4aea-16d1-45fe-9935-4beabcdd06d3&iframe></iframe>": "Comparisons &amp; Conditionals</h4>",
        "<iframe width=560 height=315 src=https://www.youtube-nocookie.com/embed/oDxl4K1NZ1k title=YouTube video player frameborder=0 allow=accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture allowfullscreen></iframe>": "Where to find expressions</h4>",
        "<iframe width=560 height=315 src=https://www.youtube-nocookie.com/embed/vkG2g0bMBFo title=YouTube video player frameborder=0 allow=accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture allowfullscreen></iframe>": "Determining the type of an expression</h4>",
        "<iframe width=560 height=315 src=https://www.youtube-nocookie.com/embed/znOFVz18FuM title=YouTube video player frameborder=0 allow=accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture allowfullscreen></iframe>": "Determining the value of an expression</h4>",
    },
    "BlackboardProcessing": {
        "title": "Blackboard Processing",
        "author": "andreas",
        "ProgrammingLanguage": "Processing",
        "ProgrammingParadigm": "imperative",
        "ConceptualAdvantage": "Generates an idea of a dyamic program behavior.",
        "Form": "Representation",
        "DrawsAttentionTo": "How a program executes dynamically from a static program text.",
        "UseWhen": "At the beginning, when simple programs have been written by students already in order to take a closer look at what's happening 'inside' Processing.",
        "Cost": "Short time to introduce, one lesson to execute.",
        "OriginSource": "Interview",
        "image": "BlackboardProcessing.jpg",
        "Mapping:": "BlackboardProcessing.jpg",
        "processor": "teacher",
        "instruction": "action taken by teacher, reported in list",
        "canvas": "drawing area on sheet of paper",
        "Topic": "State",
        "": "State",
        "<img src=/assets/images/nm/BlackboardProcessing-full.jpg class=ui fluid bordered image>": "State",
        "### Note": "State",
        "May propel the misconception of the intelligent computer (as acted out by the teacher), i.e., Roy Pea's superbug.": "State",
    },
    "ArrayAsClothesline": {
        "title": "Array as Clothesline",
        "author": "felienne",
        "ProgrammingLanguage": "any",
        "ProgrammingParadigm": "imperative",
        "ConceptualAdvantage": "Makes arrays tangible, embodied activity.",
        "Form": "Representation",
        "DrawsAttentionTo": "Arrays are compound data structures.",
        "UseWhen": "When the concept of lists is new",
        "Cost:": "When the concept of lists is new",
        "OriginSource": "Interview, Emily Bakker.",
        "image": "ArrayAsClothesline.jpg",
        "Mapping:": "ArrayAsClothesline.jpg",
        "array": "clothesline",
        "array element": "clothespin",
        "element index": "label on the pin",
        "element value": "paper sheet in the pin",
        "Topic": "Arrays",
    },
    "PhysicalJava-4-ReferencesAsArrows": {
        "title": "Physical Java (4. Refs as Arrows)",
        "sequence": "Physical Java",
        "Step": "4",
        "StepTitle": "Refs as Arrows",
        "author": "colleen",
        "ProgrammingLanguage": "Java",
        "ProgrammingParadigm": "imperative",
        "ConceptualAdvantage": "Introduces references as arrows (i.e., something more standard)",
        "Form": "Representation",
        "DrawsAttentionTo": "Standard ways of drawing Java memory (X for null, arrows for references).",
        "UseWhen": "Once students understand the idea of a reference and aliasing.",
        "Cost": "There are no longer physical elements. Everything is written, which makes it easier.",
        "OriginSource": "Own practice",
        "image": "PhysicalJava-4.jpg",
        "Mapping:": "PhysicalJava-4.jpg",
        "...": "(all aspects of Physical Java 3)",
        "reference": "arrow originating from a small box",
        "null": "X written in a small box",
        "Topic": "Memory",
    },
    "ClassroomAsMemory": {
        "title": "Our Classroom as Memory",
        "author": "andrew",
        "ProgrammingLanguage": "assembly",
        "ProgrammingParadigm": "imperative",
        "DrawsAttentionTo": "Relationships between items in memory, whether they are elements of an array, bytes in a single value, or different methods for allocating space.",
        "ConceptualAdvantage": "Provides tangible focus for discussing addresses, offsets, and even byte ordering and segments.",
        "Form": "Analogy",
        "UseWhen": "When you first introduce the idea of an address.",
        "Cost": "Very small",
        "OriginSource": "colleague's practice",
        "image": "HS_1_der_Universitat_Klagenfurt.jpg",
        "Mapping:": "HS_1_der_Universitat_Klagenfurt.jpg",
        "memory cell": "seat",
        "value": "student or number given to student",
        "address": "established by counting off",
        "offset": "number of seats between two targets",
        "segment": "front, middle, or back of the room",
        "Topic": "Memory",
        "": "Memory",
    },
    "ArrayElementsAsStudents": {
        "title": "Array Elements as Students",
        "author": "craig",
        "ProgrammingLanguage": "any",
        "ProgrammingParadigm": "imperative",
        "ConceptualAdvantage": "Creates memorable live demonstration of indexed list elements in order to distinguish between index and value. Also useful to demonstrate out-of-bound errors.",
        "Form": "Analogy",
        "DrawsAttentionTo": "Array/list indices and the values at those locations.",
        "UseWhen": "To distinguish between an element value and its index.",
        "Cost:": "To distinguish between an element value and its index.",
        "OriginSource": "Interview, John Lynch",
        "image": "ArrayElementsAsStudents.jpg",
        "Mapping:": "ArrayElementsAsStudents.jpg",
        "array": "row of students",
        "array element": "student (standing in a row)",
        "element index": "relative position of the student, start with 0",
        "element value": "nationality of student",
        "Topic": "Arrays",
    },
    "ExpressionAsTree-2": {
        "title": "Expression as Tree (2 - Logic)",
        "sequence": "Expression as Tree",
        "Step": "2",
        "StepTitle": "Logic",
        "author": "matthias",
        "ProgrammingLanguage": "Java",
        "ProgrammingParadigm": "imperative, OO",
        "ConceptualAdvantage": "Makes explicit the fact that logic expressions have the same structural properties as the well known arithmetic expressions.",
        "Form": "Representation",
        "DrawsAttentionTo": "The structure, typing, and evaluation of expressions involving logic operators and Boolean literals.",
        "UseWhen": "To reason about the structure and semantics of simple logic expressions.",
        "Cost": "Small, can be done on paper or with a tool like Expression Tutor.",
        "OriginSource": "Own practice",
        "image": "ExpressionAsTree-2.jpg",
        "Mapping:": "ExpressionAsTree-2.jpg",
        "...": "(all aspects from 1-Arithmetic)",
        "Boolean literal": "leaf tree node labeled with true or with false",
        "variable": "leaf tree node labeled with name of variable of type boolean",
        "unary negation operator (!)": "tree node with operator in front of a hole",
        "binary logical operator (|, &, ||, &&)": "tree node with operator between two holes",
        "Topic": "Expressions",
        "": "Determining the value of an expression</h4>",
        "The following videos and activities come from [ExpressionTutor.org](https://expressiontutor.org/), where you can find a much more comprehensive set of resources and tools.": "Expressions",
        "Expression Tutor supports many different programming languages,": "Expressions",
        "but the material discussed here is specific to Java.": "Expressions",
        "The [Crash Course": "Expressions in Java](https://expressiontutor.org/course/JavaExpressionsCrashCourse/part/Part%202) provides a learning experience that corresponds to this notional machine sequence.",
        "<h4 class=ui header>Explainer Video": "Determining the value of an expression</h4>",
        "The following video comes from section [Logic](https://expressiontutor.org/course/JavaExpressionsCrashCourse/part/Part%202/2.2) of the Crash Course.": "Basic Logic Expressions</h4>",
        "<iframe width=560 height=315 src=https://www.youtube-nocookie.com/embed/YDkyCqkTXjc title=YouTube video player frameborder=0 allow=accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture allowfullscreen></iframe>": "Basic Logic Expressions</h4>",
        "<h4 class=ui header>Example expressiontutor.org Activity</h4>": "Basic Logic Expressions</h4>",
        "Here is an example Expression Tutor activity. Can you solve it?": "Basic Logic Expressions</h4>",
        "<iframe width=100% height=904 frameborder=0 allowfullscreen src=https://expressiontutor.org/activity/do?task=b21be6c4-3f05-4dc8-9e8f-7aca6df627e5&iframe></iframe>": "Basic Logic Expressions</h4>",
        "<iframe width=560 height=315 src=https://www.youtube-nocookie.com/embed/oDxl4K1NZ1k title=YouTube video player frameborder=0 allow=accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture allowfullscreen></iframe>": "Where to find expressions</h4>",
        "<iframe width=560 height=315 src=https://www.youtube-nocookie.com/embed/vkG2g0bMBFo title=YouTube video player frameborder=0 allow=accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture allowfullscreen></iframe>": "Determining the type of an expression</h4>",
        "<iframe width=560 height=315 src=https://www.youtube-nocookie.com/embed/znOFVz18FuM title=YouTube video player frameborder=0 allow=accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture allowfullscreen></iframe>": "Determining the value of an expression</h4>",
    },
    "ObjectAsStudent": {
        "title": "Object as Student",
        "author": "matthias",
        "ProgrammingLanguage": "any",
        "ProgrammingParadigm": "object-oriented",
        "ConceptualAdvantage": "Makes explicit that an object is an identifiable thing that answers to calls.",
        "Form": "Analogy",
        "DrawsAttentionTo": "Objects, method calls, and returns.",
        "UseWhen": "When the meaning of OO is still unclear.",
        "Cost": "Difficult for instructor to react to students' actions during role-play,and to catch (and exploit) all the teachable moments.",
        "OriginSource": "Own practice, Andrianoff & Levine",
        "image": "ObjectAsStudent.jpg",
        "Mapping:": "ObjectAsStudent.jpg",
        "class": "natural language description of methods and their behaviors (on sheet of paper)",
        "object": "student",
        "method call": "verbal request made to student",
        "actual argument": "stated as part of verbal request",
        "return value": "verbal response from student",
        "Topic": "Objects",
        "": "Objects",
        "This idea is based on Andrianoff & Levine's": "Objects",
        "[Role Playing in an OO World](https://dl.acm.org/doi/10.1145/563340.563386).": "Objects",
        "Matthias Hauswirth uses this notional machine in the first week": "Objects",
        "of his object-oriented programming course.": "Objects",
        "The course follows an objects-first methodology,": "Objects",
        "and object creation and method invocation are the first concepts students learn.": "Objects",
        "This analogy-based notional machine has two main risks:": "Objects",
        "* Students may believe that method calls are asynchronous (non-blocking), i.e., that the caller continues operating while waiting for the callee's response": "Objects",
    },
    "ControlFlowAsStructuredCodeAnnotations-1": {
        "title": "Control Flow as Structured Code Annotations (1 - Static Structure)",
        "sequence": "Control Flow as Structured Code Annotations",
        "Step": "1",
        "StepTitle": "Static Structure",
        "author": "peter",
        "ProgrammingLanguage": "any",
        "ProgrammingParadigm": "imperative",
        "ConceptualAdvantage": "The notional machine is not an entirely separate representation from the code but acts as a secondary notation to add invisible aspects of the code execution.",
        "Form": "Representation",
        "DrawsAttentionTo": "Static view of control flow (possible paths), identification of expressions.",
        "UseWhen": "Developing understanding of how basic programming constructs work.",
        "Cost": "Code needs carefully selected and formatted to enable annotation.",
        "OriginSource": "Own practice, Peter Donaldson and Quintin Cutts",
        "image": "ControlFlowAsStructuredCodeAnnotations-1.png",
        "Mapping:": "ControlFlowAsStructuredCodeAnnotations-1.png",
        "control flow": "arrows, superimposed on the code",
        "expression": "rectangular outline around expression, superimposed on the code",
        "Topic": "ControlFlow",
        "": "ControlFlow",
        "Created by Peter Donaldson and Quintin Cutts /": "ControlFlow",
        "[PLAN C project](https://trace.dcs.gla.ac.uk/planc/).": "ControlFlow",
        "{% include paper.html": "ControlFlow",
        "authors=Peter Donaldson and Quintin Cutts": "ControlFlow",
        "url=https://dl.acm.org/doi/10.1145/3265757.3265776": "ControlFlow",
        "title=Flexible Low-cost Activities to Develop Novice Code Comprehension Skills in Schools": "ControlFlow",
        "publication=WiPSCE '19 %}": "ControlFlow",
        "### Two stages to TRACS trace": "ControlFlow",
        "First, mark code with control flow paths and parts of the code containing expressions. Second, start at the top of the program and execute each line adding or looking up any necessary information from the memory table, expression evaluation or output areas.": "ControlFlow",
        "<img src=/assets/images/nm/ControlFlowAsStructuredCodeAnnotations-full.png class=ui fluid bordered image>": "ControlFlow",
    },
    "ControlFlowAsGraph-4-ShortCircuit.html": {
        "title": "Control Flow as Graph (4 - Short-Circuit)",
        "sequence": "Control Flow as Graph",
        "Step": "4",
        "StepTitle": "Short-Circuit",
        "author": "matthias",
        "ProgrammingLanguage": "Java",
        "ProgrammingParadigm": "imperative",
        "ConceptualAdvantage": "Understand concept of short-circuit Boolean operators  (|| and &&), and see how they only evaluate their right operand if needed.",
        "Form": "Representation",
        "DrawsAttentionTo": "The idea that for short-circuit Boolean operators, the second operand may never be evaluated (allowing common constructs like if (o!=null && o.length>0) ...",
        "UseWhen": "When introducing short-circuit operators && and ||",
        "Cost": "Requires prior introduction of 'Selection'.",
        "OriginSource": "Compilers (control-flow graphs) and flow charts",
        "image": "ControlFlowAsGraph-4-ShortCircuit.jpg",
        "Mapping:": "ControlFlowAsGraph-4-ShortCircuit.jpg",
        "...": "...",
        "|| in condition": "'false' arrow to extra diamond node",
        "&& in condition": "'true' arrow to extra diamond node",
        "Topic": "ControlFlow",
        "": "ControlFlow",
        "<p>": "ControlFlow",
        "This is the fourth in a sequence of Control Flow as Graph notional machines:": "ControlFlow",
        "</p>": "ControlFlow",
        "<ol>": "ControlFlow",
        "<li><a href=ControlFlowAsGraph-1-Sequence.html>Sequence</a></li>": "ControlFlow",
        "<li><a href=ControlFlowAsGraph-2-Selection.html>Selection</a></li>": "ControlFlow",
        "<li><a href=ControlFlowAsGraph-3-MultiWaySelection.html>Multi-Way Selection</a></li>": "ControlFlow",
        "<li>Short-Circuit</li>": "ControlFlow",
        "<li><a href=ControlFlowAsGraph-5-Repetition.html>Repetition</a></li>": "ControlFlow",
        "</ol>": "ControlFlow",
        "<h3>More Information</h3>": "ControlFlow",
        "This notional machine is implemented by the Informa Clicker tool.": "ControlFlow",
        "This tool allows students in a classroom to construct control flow graphs": "ControlFlow",
        "in in-class clicker exercises.": "ControlFlow",
        "{% include paper.html": "ControlFlow",
        "authors=Matthias Hauswirth and Andrea Adamoli": "ControlFlow",
        "url=https://dl.acm.org/doi/10.1145/1596655.1596657": "ControlFlow",
        "title=Solve & Evaluate with Informa": "A Java-based Classroom Response System for Teaching Java",
        "publication=PPPJ '09 %}": "A Java-based Classroom Response System for Teaching Java",
    },
    "CallStackAsStackOfPapers": {
        "title": "Call Stack as Stack of Papers",
        "author": "matthias",
        "ProgrammingLanguage": "any",
        "ProgrammingParadigm": "imperative",
        "ConceptualAdvantage": "Makes concrete the workings of a call 'stack' (push/pop stack frames), and the notion of a 'stack frame'.",
        "DrawsAttentionTo": "The call stack.",
        "Form": "Analogy",
        "UseWhen": "When introducing calls and returns, and the lifetime of local variables.",
        "Cost": "Need papers, time to draw contents of each stack frame. Contents of stack frame not easily visible to students unless teacher holds up the stack (or uses a flip chart).",
        "OriginSource": "Interview, Antonio Carzaniga",
        "image": "CallStackAsStackOfPapers.jpg",
        "Mapping:": "CallStackAsStackOfPapers.jpg",
        "call stack": "stack of papers",
        "stack frame": "sheet of paper",
        "local variable": "line of text on a sheet",
        "call": "push a sheet on top of the stack",
        "return": "pop the top sheet off the stack",
        "Topic": "Stack",
    },
    "PhysicalJava-1-ArraysRefs": {
        "title": "Physical Java (1. Arrays/Refs)",
        "sequence": "Physical Java",
        "Step": "1",
        "StepTitle": "Arrays & Refs",
        "author": "colleen",
        "ProgrammingLanguage": "Java",
        "ProgrammingParadigm": "imperative",
        "ConceptualAdvantage": "Shows the need for references and shows int arrays as sequences of ints.",
        "Form": "Representation",
        "DrawsAttentionTo": "Two references can refer to the same array. And arrays are just sequences of variables.",
        "UseWhen": "Introducing Java ints, int arrays, references to arrays, and null.",
        "Cost": "Creating the physical model is a lot of work.",
        "OriginSource": "Own practice",
        "image": "PhysicalJava-1.jpg",
        "Mapping:": "PhysicalJava-1.jpg",
        "int": "number written on paper in a small blue pocket",
        "int array": "sequence of int variables",
        "variable": "variable name followed by a small box",
        "stack frame": "rectangle with the method name written on the side containing all local variables",
        "reference": "pocket containing a remote control with a ribbon to the referent",
        "null": "empty pocket with an X shown in the back",
        "Topic": "Arrays",
    },
    "ArrayAsRowOfParkingSpaces": {
        "title": "Array as Row of Parking Spaces",
        "author": "jan",
        "ProgrammingLanguage": "any",
        "ProgrammingParadigm": "imperative",
        "ConceptualAdvantage": "Builds from the notion of a 'Variable as a Parking Space' and leverages the notion that spaces in larger parking lots are often numbered.",
        "Form": "Analogy",
        "DrawsAttentionTo": "The use of indices in arrays as ell as the array's construction from contiguous adjacent variables in memory.",
        "UseWhen": "",
        "Cost": "Short time to introduce, but learners need to be familiar with parking lots and how someone might locate a specific car in a row in a parking lot.",
        "OriginSource": "Own practice",
        "image": "ArrayAsRowOfParkingSpaces.jpg",
        "Mapping:": "ArrayAsRowOfParkingSpaces.jpg",
        "array": "row of spaces in a parking lot",
        "array element": "car",
        "element index": "space number in lot",
        "element value": "specific car in a specific value",
        "Topic": "Arrays",
        "": "Arrays",
        "In a statically typed language one can discuss rows that are for cars only, trucks only, motorcycles only, etc.": "Arrays",
    },
    "TypedBoxesMemory": {
        "title": "Typed Boxes Memory",
        "author": "johan",
        "ProgrammingLanguage": "Java, C#, ...",
        "ProgrammingParadigm": "imperative & OO",
        "ConceptualAdvantage": "Students need to understand that program variables (or collections of variables in an object) refer to memory locations, which might contain different kinds of values, and that statements (methods) change memory locations for variables (objects).",
        "Form": "Representation",
        "DrawsAttentionTo": "Different kinds of variables (objects) take up different space in memory. Statements and methods change the memory, which is visualized by changing the contents of the boxes when executing a statement or method.",
        "UseWhen": "When introducing language constructs in a beginners' programming course",
        "Cost": "Investment - time/cognitivie",
        "OriginSource": "Interview, Jeroen Fokker",
        "image": "TypedBoxesMemory.jpg",
        "Mapping:": "TypedBoxesMemory.jpg",
        "variable": "typed box/memory location",
        "statement": "changes a memory location",
        "object": "collection of boxes in memory",
        "method": "changes an object",
        "Topic": "Memory",
        "": "Memory",
        "Based on a textbook by Lindsey & van der Meulen.": "Memory",
    },
    "ControlFlowAsGraph-1-Sequence.html": {
        "title": "Control Flow as Graph (1 - Sequence)",
        "sequence": "Control Flow as Graph",
        "Step": "1",
        "StepTitle": "Sequence",
        "author": "matthias",
        "ProgrammingLanguage": "Java",
        "ProgrammingParadigm": "imperative",
        "ConceptualAdvantage": "See a method as a sequence of statements to execute, and make clear that that sequence starts when the method is called and ends when the method returns.",
        "Form": "Representation",
        "DrawsAttentionTo": "The idea of a 'sequence' in structured programming, where a sequence consists of statements to execute.",
        "UseWhen": "When introducing how to implement a method's body",
        "Cost": "Introduction of a potentially new abstract representation (graph with edges and nodes). Entry and exit nodes, which do not correspond to statements in the source code (note",
        "OriginSource": "Compilers (control-flow graphs) and flow charts",
        "image": "ControlFlowAsGraph-1-Sequence.jpg",
        "Mapping:": "ControlFlowAsGraph-1-Sequence.jpg",
        "statement": "rectangular node",
        "control-flow between statements": "arrow from node to node",
        "method entry": "round 'e' node at top",
        "method exit": "round 'x' node at bottom",
        "Topic": "ControlFlow",
        "": "ControlFlow",
        "<p>": "ControlFlow",
        "This is the first in a sequence of Control Flow as Graph notional machines:": "ControlFlow",
        "</p>": "ControlFlow",
        "<ol>": "ControlFlow",
        "<li>Sequence</li>": "ControlFlow",
        "<li><a href=ControlFlowAsGraph-2-Selection.html>Selection</a></li>": "ControlFlow",
        "<li><a href=ControlFlowAsGraph-3-MultiWaySelection.html>Multi-Way Selection</a></li>": "ControlFlow",
        "<li><a href=ControlFlowAsGraph-4-ShortCircuit.html>Short-Circuit</a></li>": "ControlFlow",
        "<li><a href=ControlFlowAsGraph-5-Repetition.html>Repetition</a></li>": "ControlFlow",
        "</ol>": "ControlFlow",
        "The following video Matthias Hauswirth uses the Control Flow as Graph": "ControlFlow",
        "notional machine in his Programming Fundamentals 2 Bachelor course": "ControlFlow",
        "to explain sequences of statements as well as the entry and exit node in Java.": "ControlFlow",
        "It also discusses <code>if</code>-statements": "ControlFlow",
        "(covered in the <a href=ControlFlowAsGraph-2-Selection.html>Selection</a> variant of this notional machine).": "ControlFlow",
        "<iframe width=854 height=480 src=https://www.youtube.com/embed/U0Sn6oJxOi8 frameborder=0 allow=accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture allowfullscreen></iframe>": "ControlFlow",
        "<h3>More Information</h3>": "ControlFlow",
        "This notional machine is implemented by the Informa Clicker tool.": "ControlFlow",
        "This tool allows students in a classroom to construct control flow graphs": "ControlFlow",
        "in in-class clicker exercises.": "ControlFlow",
        "{% include paper.html": "ControlFlow",
        "authors=Matthias Hauswirth and Andrea Adamoli": "ControlFlow",
        "url=https://dl.acm.org/doi/10.1145/1596655.1596657": "ControlFlow",
        "title=Solve & Evaluate with Informa": "A Java-based Classroom Response System for Teaching Java",
        "publication=PPPJ '09 %}": "A Java-based Classroom Response System for Teaching Java",
    },
    "PhysicalJava-6-Inheritance": {
        "title": "Physical Java (6. Inheritance)",
        "sequence": "Physical Java",
        "Step": "6",
        "StepTitle": "Inheritance",
        "author": "colleen",
        "ProgrammingLanguage": "Java",
        "ProgrammingParadigm": "imperative",
        "ConceptualAdvantage": "Distinguish between the type of the reference and the type of the object.",
        "Form": "Representation",
        "DrawsAttentionTo": "Reference type constrains what methods can be called and object type determines what method is called.",
        "UseWhen": "Introducing inheritance.",
        "Cost": "Creating the physical model is a lot of work.",
        "OriginSource": "Own practice",
        "image": "PhysicalJava-6.jpg",
        "Mapping:": "PhysicalJava-6.jpg",
        "...": "(all aspects of Physical Java 2)",
        "variable type": "sticky note with the name of the type next to the pocket that holds the reference",
        "parent reference": "a remote control that only has buttons corresponding to the things that the parent object knows how to do.",
        "child object": "a stuffed animal that - as a child - 'does what it wants' and not necessarily what the parent would do.",
        "Topic": "Objects",
    },
    "RecursionRolePlay": {
        "title": "Recursion Role Play",
        "author": "matthias",
        "ProgrammingLanguage": "any",
        "ProgrammingParadigm": "imperative",
        "ConceptualAdvantage": "Makes explicit recursive calls as a form to 'delegate' parts of work, base case as a situation where delegation stops. Allows unpacking many aspects of recursive computation (pairing of call/return, passing info down through params, up through return values, tail recursion).",
        "Form": "Analogy",
        "DrawsAttentionTo": "Recursive calls and returns, base case & recursive case, tail recursion",
        "UseWhen": "When introducing recursion (recursive computation over recursive data structure).",
        "Cost": "Difficult for instructor to react to students' actions during role-play, and to catch (and exploit) all the teachable moments. May require prior introduction of role-play (e.g., with 'Object as Student').",
        "OriginSource": "Own practice, Benedict DuBoulay",
        "image": "RecursionRolePlay.jpg",
        "Mapping:": "RecursionRolePlay.jpg",
        "object": "person",
        "method call": "verbal request to next person in line",
        "return value": "verbal response from next person in line",
        "base case": "(action of) last person in line",
        "recursive case": "(action of) all but last persons in line",
        "linked list": "line of persons (e.g., waiting in amusement park, or row in classroom)",
        "Topic": "Functions",
        "": "Functions",
        "This notional machine is based on a suggestion by Benedict DuBoulay at EC-TEL 2016.": "Functions",
        "Matthias Hauswirth used this to introduce recursion in an object-oriented programming course.": "Functions",
    },
    "ExpressionAsTree-3": {
        "title": "Expression as Tree (3 - Objects)",
        "sequence": "Expression as Tree",
        "Step": "3",
        "StepTitle": "Objects",
        "author": "matthias",
        "ProgrammingLanguage": "Java",
        "ProgrammingParadigm": "imperative, OO",
        "ConceptualAdvantage": "Makes explicit the fact that object allocation, method invocation, and field access are just expressions and can be composed like any other expression.",
        "Form": "Representation",
        "DrawsAttentionTo": "The structure, typing, and evaluation of expressions involving instances and classes.",
        "UseWhen": "When explaining nesting and chaining of method calls and constructor calls, class vs. instance method and field accesses, null, and this.",
        "Cost": "Small, can be done on paper or with a tool like Expression Tutor.",
        "OriginSource": "Own practice",
        "image": "ExpressionAsTree-3.jpg",
        "Mapping:": "ExpressionAsTree-3.jpg",
        "...": "(all aspects from 2-Logic)",
        "null": "tree node containing 'null'",
        "this": "tree node containing 'this'",
        "instantiation": "tree node with 'new', class name, and a parentheses containing comma-separated holes for constructor parameters",
        "variable": "tree node containing name of variable of an Object type",
        "instance field access": "tree node containing a hole, a dot, and a field name",
        "instance method invocation": "tree node with a hole, a dot, and parentheses containing comma-separated holes for method parameters",
        "class field access": "tree node containing class name, a dot, and a field name",
        "class method invocation": "tree node with class name, a dot, and parentheses containing comma-separated holes for method parameters",
        "Topic": "Expressions",
        "": "Determining the value of an expression</h4>",
        "The following videos and activities come from [ExpressionTutor.org](https://expressiontutor.org/), where you can find a much more comprehensive set of resources and tools.": "Expressions",
        "Expression Tutor supports many different programming languages,": "Expressions",
        "but the material discussed here is specific to Java.": "Expressions",
        "The [Crash Course": "Expressions in Java](https://expressiontutor.org/course/JavaExpressionsCrashCourse/part/Part%202) provides a learning experience that corresponds to this notional machine sequence.",
        "<h4 class=ui header>Explainer Video": "Determining the value of an expression</h4>",
        "The following video comes from section [Objects](https://expressiontutor.org/course/JavaExpressionsCrashCourse/part/Part%202/2.3) of the Crash Course.": "Expressions Involving Objects</h4>",
        "<iframe width=560 height=315 src=https://www.youtube-nocookie.com/embed/IF1ZVvRQQUc title=YouTube video player frameborder=0 allow=accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture allowfullscreen></iframe>": "Expressions Involving Objects</h4>",
        "<h4 class=ui header>Example expressiontutor.org Activity</h4>": "Expressions Involving Objects</h4>",
        "Here is an example Expression Tutor activity. Can you solve it?": "Expressions Involving Objects</h4>",
        "<iframe width=100% height=904 frameborder=0 allowfullscreen src=https://expressiontutor.org/activity/do?task=615f4aea-16d1-45fe-9935-4beabcdd06d3&iframe></iframe>": "Expressions Involving Objects</h4>",
        "<iframe width=560 height=315 src=https://www.youtube-nocookie.com/embed/oDxl4K1NZ1k title=YouTube video player frameborder=0 allow=accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture allowfullscreen></iframe>": "Where to find expressions</h4>",
        "<iframe width=560 height=315 src=https://www.youtube-nocookie.com/embed/vkG2g0bMBFo title=YouTube video player frameborder=0 allow=accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture allowfullscreen></iframe>": "Determining the type of an expression</h4>",
        "<iframe width=560 height=315 src=https://www.youtube-nocookie.com/embed/znOFVz18FuM title=YouTube video player frameborder=0 allow=accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture allowfullscreen></iframe>": "Determining the value of an expression</h4>",
    },
    "RecursionDemoPyTutor.html": {
        "title": "Recursion Demo with Python Tutor",
        "author": "craig",
        "ProgrammingLanguage": "Python",
        "ProgrammingParadigm": "imperative",
        "Form": "Representation",
        "ConceptualAdvantage": "Demonstrates what happens to variable values when they are passed to a function. Distinguishes frame elements among each recursive call. Shows separate stack frames, each with own parameters and variables,",
        "for each recursive call.": "Demonstrates what happens to variable values when they are passed to a function. Distinguishes frame elements among each recursive call. Shows separate stack frames, each with own parameters and variables,",
        "DrawsAttentionTo": "Addition of each stack frame as each recursive call is made. Collapse of stack frame as function completes and returns value.",
        "UseWhen": "When introducing recursion",
        "Cost": "Requires use and understanding of the Python Tutor visualization tool",
        "OriginSource": "Interview, Amber Settle",
        "image": "RecDemoPyTutor.png",
        "Mapping:": "RecDemoPyTutor.png",
        "frame": "group of elements with function name",
        "parameter": "labeled box inside frame",
        "local variable": "labeled box inside frame",
        "Topic": "Functions",
        "": "Functions",
        "<p>": "Functions",
        "Amber Settle presented this use of Python Tutor in an interview. She uses it to explain how recursive calls work when introducing recursion.": "Functions",
        "</p>": "",
        "<h3>Notes from Interview</h3>": "Functions",
        "From the interview": "",
        "Students tend to use it a little bit mechanically so they tend to just step through": "",
        "it and not really think about what's actually happening on the screen.": "",
    },
    "ControlFlowAsGraph-2-Selection.html": {
        "title": "Control Flow as Graph (2 - Selection)",
        "sequence": "Control Flow as Graph",
        "Step": "2",
        "StepTitle": "Selection",
        "author": "matthias",
        "ProgrammingLanguage": "Java",
        "ProgrammingParadigm": "imperative",
        "ConceptualAdvantage": "Understand concept of selection from structured programming (conditional statements like if, if-else), and make clear that a statement may or may not execute, based on a decision taken earlier in the control flow.",
        "Form": "Representation",
        "DrawsAttentionTo": "The idea of a 'selection' in structured programming, where a data (the condition's value) is turned into control flow (the next statement to execute).",
        "UseWhen": "When introducing if-statements",
        "Cost": "Requires prior introduction of 'Sequence'. Mismatch for short-circuit operators (&&, ||) or conditional expressions (c ? a",
        "OriginSource": "Compilers (control-flow graphs) and flow charts",
        "image": "ControlFlowAsGraph-2-Selection.jpg",
        "Mapping:": "ControlFlowAsGraph-2-Selection.jpg",
        "...": "...",
        "if condition": "diamond-shaped node",
        "condition outcome": "label on an arrow coming out of a condition (e.g., true, false)",
        "Topic": "ControlFlow",
        "": "ControlFlow",
        "<p>": "ControlFlow",
        "This is the second in a sequence of Control Flow as Graph notional machines:": "ControlFlow",
        "</p>": "ControlFlow",
        "<ol>": "ControlFlow",
        "<li><a href=ControlFlowAsGraph-1-Sequence.html>Sequence</a></li>": "ControlFlow",
        "<li>Selection</li>": "ControlFlow",
        "<li><a href=ControlFlowAsGraph-3-MultiWaySelection.html>Multi-Way Selection</a></li>": "ControlFlow",
        "<li><a href=ControlFlowAsGraph-4-ShortCircuit.html>Short-Circuit</a></li>": "ControlFlow",
        "<li><a href=ControlFlowAsGraph-5-Repetition.html>Repetition</a></li>": "ControlFlow",
        "</ol>": "ControlFlow",
        "The following video Matthias Hauswirth uses the Control Flow as Graph": "ControlFlow",
        "notional machine in his Programming Fundamentals 2 Bachelor course": "ControlFlow",
        "to explain <code>if</code>-statements in Java:": "ControlFlow",
        "<iframe width=854 height=480 src=https://www.youtube.com/embed/U0Sn6oJxOi8 frameborder=0 allow=accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture allowfullscreen></iframe>": "ControlFlow",
        "<h3>More Information</h3>": "ControlFlow",
        "This notional machine is implemented by the Informa Clicker tool.": "ControlFlow",
        "This tool allows students in a classroom to construct control flow graphs": "ControlFlow",
        "in in-class clicker exercises.": "ControlFlow",
        "{% include paper.html": "ControlFlow",
        "authors=Matthias Hauswirth and Andrea Adamoli": "ControlFlow",
        "url=https://dl.acm.org/doi/10.1145/1596655.1596657": "ControlFlow",
        "title=Solve & Evaluate with Informa": "A Java-based Classroom Response System for Teaching Java",
        "publication=PPPJ '09 %}": "A Java-based Classroom Response System for Teaching Java",
    },
    "PhysicalJava-3-WrittenObjects": {
        "title": "Physical Java (3. Written Objects)",
        "sequence": "Physical Java",
        "Step": "3",
        "StepTitle": "Written Objects",
        "author": "colleen",
        "ProgrammingLanguage": "Java",
        "ProgrammingParadigm": "imperative",
        "ConceptualAdvantage": "Helps students plan code; avoids confusion of crossed out arrows.",
        "Form": "Representation",
        "DrawsAttentionTo": "The effect of resetting references.",
        "UseWhen": "When having students implement a LinkedList in Java.",
        "Cost": "Creating the physical model is a lot of work.",
        "OriginSource": "Own practice",
        "image": "PhysicalJava-3.jpg",
        "Mapping:": "PhysicalJava-3.jpg",
        "...": "(all aspects of Physical Java 1)",
        "object": "object type written/underlined in a rectangle",
        "int": "number written in a small box",
        "instance variables": "shown in an object",
        "Topic": "Objects",
    },
    "StackAndHeapDiagram-1": {
        "title": "Stack and Heap Diagram (1 - Objects)",
        "sequence": "Stack and Heap Diagram",
        "Step": "1",
        "StepTitle": "Objects",
        "author": "matthias",
        "ProgrammingLanguage": "Java",
        "ProgrammingParadigm": "imperative, OO",
        "ConceptualAdvantage": "Makes explicit the notion of an object, that groups together all the variables that correspond to the object's state.",
        "Form": "Representation",
        "DrawsAttentionTo": "An object's state.",
        "UseWhen": "Introducing the concept of an object.",
        "Cost": "Straightforward; just draw a rounded rectangle around some variables.",
        "OriginSource": "Own practice",
        "image": "StackAndHeapDiagram-1.png",
        "Mapping:": "StackAndHeapDiagram-1.png",
        "object": "red rounded rectangle, with class name containing instance variables",
        "instance variable": "box inside object, with name, type, value",
        "Topic": "Objects",
        "": "A Java-based Classroom Response System for Teaching Java",
        "We use this notional machine in instruction as well as assessments": "Objects",
        "(e.g., clicker questions, mastery checks, exams).": "Objects",
        "For instruction, the instructor draws the representation.": "Objects",
        "For assessment, the student draws the representation.": "Objects",
        "The *name* of this notional machine is inspired by two of the three regions that make up the memory of the runtime environment of imperative programming languages:": "Objects",
        "* Stack": "where stack frames are allocated that hold local variables and parameters of functions/procedures/methods",
        "* Heap": "where dynamically allocated memory (e.g., objects and arrays in Java) is located",
        "The third area, globals, could be added to the diagram, but it is less important when using an object-oriented style where static members are less prevalent.": "where dynamically allocated memory (e.g., objects and arrays in Java) is located",
        "* Globals": "where global variables (e.g., static fields in Java) are located",
        "While we primarily use this notional machine for Java, it could easily be adapted for other imperative object-oriented programming languages, such as C# or Python.": "where global variables (e.g., static fields in Java) are located",
        "<h3 class=ui header>Notation</h3>": "where global variables (e.g., static fields in Java) are located",
        "<h4 class=ui header>Objects, Stack Frames, and References</h4>": "where global variables (e.g., static fields in Java) are located",
        "<img src=/assets/images/nm/StackAndHeapDiagram.png class=ui bordered image>": "where global variables (e.g., static fields in Java) are located",
        "<h4 class=ui header>Arrays</h4>": "where global variables (e.g., static fields in Java) are located",
        "<img src=/assets/images/nm/StackAndHeapDiagram-Arrays.png class=ui bordered image>": "where global variables (e.g., static fields in Java) are located",
        "<h4 class=ui header>Origins of Notation</h4>": "where global variables (e.g., static fields in Java) are located",
        "The *notation* for this notional machine is based on how the [BlueJ IDE](https://bluej.org/) represents objects, with a few differences:": "where global variables (e.g., static fields in Java) are located",
        "* BlueJ only shows objects, we also show stack frames (as rectangles)": "where global variables (e.g., static fields in Java) are located",
        "* Unlike BlueJ, we show references as arrows": "where global variables (e.g., static fields in Java) are located",
        "* Unlike BlueJ, we refrain from associating names with objects,": "where global variables (e.g., static fields in Java) are located",
        "to avoid the [ObjectsMustBeNamed](https://progmiscon.org/misconceptions/Java/ObjectsMustBeNamed/) misconception.": "where global variables (e.g., static fields in Java) are located",
        "* We represent fields (and variables in general) as rectangles,": "where global variables (e.g., static fields in Java) are located",
        "but we place the type of the variable **above** the rectangle, the name of the variable on the left, and the value inside, and we **do not show access modifiers** (private, protected, public).": "where global variables (e.g., static fields in Java) are located",
        "* We draw a **bold** rectangle outline for `final` variables.": "where global variables (e.g., static fields in Java) are located",
        "<img src=/assets/images/nm/StackAndHeapDiagram-BlueJ-Object.png class=ui medium image>": "where global variables (e.g., static fields in Java) are located",
        "<h3 class=ui header>Stack &amp; Heap Diagrams in Informa Clicker</h3>": "where global variables (e.g., static fields in Java) are located",
        "The [Informa Clicker](http://sape.inf.usi.ch/informa) tool, a software-based classroom response system, provides a question type with an integrated editor": "where global variables (e.g., static fields in Java) are located",
        "for stack and heap diagrams.": "where global variables (e.g., static fields in Java) are located",
        "{% include paper.html": "where global variables (e.g., static fields in Java) are located",
        "authors=Matthias Hauswirth and Andrea Adamoli": "where global variables (e.g., static fields in Java) are located",
        "url=https://dl.acm.org/doi/10.1145/1596655.1596657": "where global variables (e.g., static fields in Java) are located",
        "title=Solve & Evaluate with Informa": "A Java-based Classroom Response System for Teaching Java",
        "publication=PPPJ '09 %}": "A Java-based Classroom Response System for Teaching Java",
        "<h4 class=ui header>Constructor Calls</h4>": "A Java-based Classroom Response System for Teaching Java",
        "<iframe width=560 height=315 src=https://www.youtube-nocookie.com/embed/Hpg4fBTCYuA title=YouTube video player frameborder=0 allow=accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture allowfullscreen></iframe>": "A Java-based Classroom Response System for Teaching Java",
        "<h4 class=ui header>Local Variables</h4>": "A Java-based Classroom Response System for Teaching Java",
        "<iframe width=560 height=315 src=https://www.youtube-nocookie.com/embed/GXqU1QEdC58 title=YouTube video player frameborder=0 allow=accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture allowfullscreen></iframe>": "A Java-based Classroom Response System for Teaching Java",
        "<h4 class=ui header>Method Calls</h4>": "A Java-based Classroom Response System for Teaching Java",
        "<iframe width=560 height=315 src=https://www.youtube-nocookie.com/embed/OGsd8A9tCn0 title=YouTube video player frameborder=0 allow=accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture allowfullscreen></iframe>": "A Java-based Classroom Response System for Teaching Java",
        "<h3 class=ui header>Web-Based Stack &amp; Heap Diagram Editor</h3>": "A Java-based Classroom Response System for Teaching Java",
        "Davide Ciulla developed a prototype of a [web based stack and heap diagram editor](https://stackandheap.netlify.app/):": "A Java-based Classroom Response System for Teaching Java",
        "<iframe src=https://stackandheap.netlify.app/ width=100% height=600>": "A Java-based Classroom Response System for Teaching Java",
        "</iframe>": "A Java-based Classroom Response System for Teaching Java",
    },
    "ArrayAsStackOfBoxes": {
        "title": "Array as Stack of Boxes",
        "author": "felienne",
        "ProgrammingLanguage": "any",
        "ProgrammingParadigm": "imperative",
        "ConceptualAdvantage": "Makes arrays tangible, embodied activity.",
        "Form": "Analogy",
        "DrawsAttentionTo": "Lists as compound data type",
        "UseWhen": "When the concept of lists is new",
        "Cost:": "When the concept of lists is new",
        "OriginSource:": "When the concept of lists is new",
        "image": "ArrayAsStackOfBoxes.jpg",
        "Mapping:": "ArrayAsStackOfBoxes.jpg",
        "array": "stack of boxes",
        "array element": "box",
        "element index": "number on each box",
        "element value": "post-it in box",
        "Topic": "Arrays",
        "": "Arrays",
    },
    "VerbalExpressions": {
        "title": "Verbal Expressions",
        "author": "craig",
        "ProgrammingLanguage": "any",
        "ProgrammingParadigm": "imperative",
        "ConceptualAdvantage": "Distinguishes between (string) literals and variables that represent them. Makes white-space characters and punctuation explicit.",
        "Form": "Representation",
        "DrawsAttentionTo": "Individual characters in a string.",
        "UseWhen": "When explaining expressions. May be nested in other NMs (e.g., Variable as a Box) when explaining variable assignment.",
        "Cost:": "When explaining expressions. May be nested in other NMs (e.g., Variable as a Box) when explaining variable assignment.",
        "OriginSource": "Own practice",
        "image": "VerbalExpressions.png",
        "Mapping:": "VerbalExpressions.png",
        "literal string": "pronounce each character in string",
        "variable": "pronounce 'the variable' and give its whole name",
        "Topic": "Expressions",
    },
    "MethodCallDance.html": {
        "title": "Method-Call Dance",
        "author": "johan",
        "ProgrammingLanguage": "Java / C# / any",
        "ProgrammingParadigm": "imperative",
        "ConceptualAdvantage": "To illustrate method calls, the teacher dances to another location, performs some actions there (changing the memory), and then returns to the previous location through the return address, where he continues with performing actions",
        "Form": "Analogy",
        "DrawsAttentionTo": "It illustrates that you `go elsewhere in the memory' when you call a method, and that you need to remember where you came from (return address) when you go elsewhere.",
        "A dancing teacher helps students to remember the concept.": "It illustrates that you `go elsewhere in the memory' when you call a method, and that you need to remember where you came from (return address) when you go elsewhere.",
        "UseWhen": "When introducing method-calls",
        "Cost": "Hardly any cost involved",
        "OriginSource": "Interview, Jeroen Fokker",
        "image": "MethodCallDance.png",
        "Mapping:": "MethodCallDance.png",
        "method call": "dance to another location",
        "return address": "dance back to the previous location",
        "Topic": "Memory",
    },
    "PythonComputer_1.html": {
        "title": "Python Computer (V1 - Beginning)",
        "sequence": "Python Computer",
        "Step": "1",
        "StepTitle": "Beginning",
        "author": "andreas",
        "ProgrammingLanguage": "Python",
        "ProgrammingParadigm": "imperative",
        "ConceptualAdvantage": "Expandable 'offline' model of program execution. In its beginning stage, it only covers control flow and variables (without references) of Python scripts.",
        "Form": "Representation",
        "DrawsAttentionTo": "Semantics of control flow in Python. Visible effects of each line on the 'state' of the Python computer.",
        "UseWhen": "At the beginning of a typical 'walk through' of the different programming constructs.",
        "Cost": "Time consuming to prepare. Easy to follow for learners, as it grows in complexity. Can be used for exercises (fill out sheets of the computer).",
        "OriginSource": "Own practice",
        "image": "PythonComputer_1.png",
        "Mapping:": "PythonComputer_1.png",
        "memory": "table of identifer and value",
        "instruction": "update of state according to defined rules",
        "variable": "entry in the table",
        "conditional": "conditional evaluator (flag) that affects the 'program counter'",
        "control flow": "program counter that identifies next line to get executed and is updated according to a set of rules",
        "Topic": "Other",
        "": "Other",
        "<p>": "Other",
        "The idea is to offer an offline (in the sense of not automated) visualization of program execution. The necessary model of the computer executing the program gets increasingly more complex, as more programming constructs are introduced.": "Other",
        "Similar ways of stepping through code can be found in the typical visualization (or debugging) tools and this connection between offline and online is intentional.": "Other",
        "</p>": "It becomes cumbersome for more than very simple scripts to create and once finished, modifications to a program are time consuming.",
        "In its basic form, the executor can run a script sequentially and jump in the script based on the evaluation of a conditional. Variables of primitive types (i.e. str, int, float, bool) are stored in a memory table that consists of identifier and current value.": "Other",
        "A template for all stages can be found <a href=https://notionalmachines.github.io/assets/misc/nm/Python Computer Template.pptx>here</a>": "Other",
        "An example for the execution of a simple script in German can be found <a href=https://notionalmachines.github.io/assets/misc/nm/PythonComputer_1_Example.pdf>here</a> (Speicher = Memory, Bezeichner = Identifier, Wert = Value, Bedingung = Condition, Nächste Zeile = Next Line).": "Other",
        "It also shows the big drawback of having it as slides only": "It becomes cumbersome for more than very simple scripts to create and once finished, modifications to a program are time consuming.",
        "The advantage is that, once introduced, it is not necessary to always step through a program from the beginning, a slide can also jump right into the middle of an execution to highlight interesting phenomena.": "It becomes cumbersome for more than very simple scripts to create and once finished, modifications to a program are time consuming.",
        "As it is manual and on slides, it is also easy to add boxes or other elements to guide students' attention to some aspect.": "It becomes cumbersome for more than very simple scripts to create and once finished, modifications to a program are time consuming.",
        "Also, the template can be used in exercises and assessments and students can fill in various aspects of the NM (e.g. the memory after a program has been run).": "It becomes cumbersome for more than very simple scripts to create and once finished, modifications to a program are time consuming.",
    },
    "StackAndHeapDiagram-4": {
        "title": "Stack and Heap Diagram (4 - Arrays)",
        "sequence": "Stack and Heap Diagram",
        "Step": "4",
        "StepTitle": "Arrays",
        "author": "matthias",
        "ProgrammingLanguage": "Java",
        "ProgrammingParadigm": "imperative, OO",
        "ConceptualAdvantage": "Makes explicit that arrays are heap objects where elements are accessed by index, and where the length is stored in a special read-only field. Particularly useful when explaining arrays of arrays.",
        "Form": "Representation",
        "DrawsAttentionTo": "Arrays.",
        "UseWhen": "Introducing the concept of array, and arrays of arrays.",
        "Cost": "Only a minor addition to the cost of the prior variant of this notional machine.",
        "OriginSource": "Own practice",
        "image": "StackAndHeapDiagram-4.png",
        "Mapping:": "StackAndHeapDiagram-4.png",
        "...": "(all aspects of 1 - Objects, 2 - Stack Frames, 3 - References)",
        "array": "red rounded rectangle on the heap, labeled with array type",
        "array element": "a field in the array, with index, type, and value",
        "array length": "a field in the array, with name 'length' and type int, and a value corresponding to the number of elements",
        "Topic": "Arrays",
        "": "A Java-based Classroom Response System for Teaching Java",
        "We use this notional machine in instruction as well as assessments": "Arrays",
        "(e.g., clicker questions, mastery checks, exams).": "Arrays",
        "For instruction, the instructor draws the representation.": "Arrays",
        "For assessment, the student draws the representation.": "Arrays",
        "The *name* of this notional machine is inspired by two of the three regions that make up the memory of the runtime environment of imperative programming languages:": "Arrays",
        "* Stack": "where stack frames are allocated that hold local variables and parameters of functions/procedures/methods",
        "* Heap": "where dynamically allocated memory (e.g., objects and arrays in Java) is located",
        "The third area, globals, could be added to the diagram, but it is less important when using an object-oriented style where static members are less prevalent.": "where dynamically allocated memory (e.g., objects and arrays in Java) is located",
        "* Globals": "where global variables (e.g., static fields in Java) are located",
        "While we primarily use this notional machine for Java, it could easily be adapted for other imperative object-oriented programming languages, such as C# or Python.": "where global variables (e.g., static fields in Java) are located",
        "<h3 class=ui header>Notation</h3>": "where global variables (e.g., static fields in Java) are located",
        "<h4 class=ui header>Objects, Stack Frames, and References</h4>": "where global variables (e.g., static fields in Java) are located",
        "<img src=/assets/images/nm/StackAndHeapDiagram.png class=ui bordered image>": "where global variables (e.g., static fields in Java) are located",
        "<h4 class=ui header>Arrays</h4>": "where global variables (e.g., static fields in Java) are located",
        "<img src=/assets/images/nm/StackAndHeapDiagram-Arrays.png class=ui bordered image>": "where global variables (e.g., static fields in Java) are located",
        "<h4 class=ui header>Origins of Notation</h4>": "where global variables (e.g., static fields in Java) are located",
        "The *notation* for this notional machine is based on how the [BlueJ IDE](https://bluej.org/) represents objects, with a few differences:": "where global variables (e.g., static fields in Java) are located",
        "* BlueJ only shows objects, we also show stack frames (as rectangles)": "where global variables (e.g., static fields in Java) are located",
        "* Unlike BlueJ, we show references as arrows": "where global variables (e.g., static fields in Java) are located",
        "* Unlike BlueJ, we refrain from associating names with objects,": "where global variables (e.g., static fields in Java) are located",
        "to avoid the [ObjectsMustBeNamed](https://progmiscon.org/misconceptions/Java/ObjectsMustBeNamed/) misconception.": "where global variables (e.g., static fields in Java) are located",
        "* We represent fields (and variables in general) as rectangles,": "where global variables (e.g., static fields in Java) are located",
        "but we place the type of the variable **above** the rectangle, the name of the variable on the left, and the value inside, and we **do not show access modifiers** (private, protected, public).": "where global variables (e.g., static fields in Java) are located",
        "* We draw a **bold** rectangle outline for `final` variables.": "where global variables (e.g., static fields in Java) are located",
        "<img src=/assets/images/nm/StackAndHeapDiagram-BlueJ-Object.png class=ui medium image>": "where global variables (e.g., static fields in Java) are located",
        "<h3 class=ui header>Stack &amp; Heap Diagrams in Informa Clicker</h3>": "where global variables (e.g., static fields in Java) are located",
        "The [Informa Clicker](http://sape.inf.usi.ch/informa) tool, a software-based classroom response system, provides a question type with an integrated editor": "where global variables (e.g., static fields in Java) are located",
        "for stack and heap diagrams.": "where global variables (e.g., static fields in Java) are located",
        "{% include paper.html": "where global variables (e.g., static fields in Java) are located",
        "authors=Matthias Hauswirth and Andrea Adamoli": "where global variables (e.g., static fields in Java) are located",
        "url=https://dl.acm.org/doi/10.1145/1596655.1596657": "where global variables (e.g., static fields in Java) are located",
        "title=Solve & Evaluate with Informa": "A Java-based Classroom Response System for Teaching Java",
        "publication=PPPJ '09 %}": "A Java-based Classroom Response System for Teaching Java",
        "<h4 class=ui header>Constructor Calls</h4>": "A Java-based Classroom Response System for Teaching Java",
        "<iframe width=560 height=315 src=https://www.youtube-nocookie.com/embed/Hpg4fBTCYuA title=YouTube video player frameborder=0 allow=accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture allowfullscreen></iframe>": "A Java-based Classroom Response System for Teaching Java",
        "<h4 class=ui header>Local Variables</h4>": "A Java-based Classroom Response System for Teaching Java",
        "<iframe width=560 height=315 src=https://www.youtube-nocookie.com/embed/GXqU1QEdC58 title=YouTube video player frameborder=0 allow=accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture allowfullscreen></iframe>": "A Java-based Classroom Response System for Teaching Java",
        "<h4 class=ui header>Method Calls</h4>": "A Java-based Classroom Response System for Teaching Java",
        "<iframe width=560 height=315 src=https://www.youtube-nocookie.com/embed/OGsd8A9tCn0 title=YouTube video player frameborder=0 allow=accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture allowfullscreen></iframe>": "A Java-based Classroom Response System for Teaching Java",
        "<h3 class=ui header>Web-Based Stack &amp; Heap Diagram Editor</h3>": "A Java-based Classroom Response System for Teaching Java",
        "Davide Ciulla developed a prototype of a [web based stack and heap diagram editor](https://stackandheap.netlify.app/):": "A Java-based Classroom Response System for Teaching Java",
        "<iframe src=https://stackandheap.netlify.app/ width=100% height=600>": "A Java-based Classroom Response System for Teaching Java",
        "</iframe>": "A Java-based Classroom Response System for Teaching Java",
    },
    "ControlFlowAsGraph-3-MultiWaySelection.html": {
        "title": "Control Flow as Graph (3 - Multi-Way Selection)",
        "sequence": "Control Flow as Graph",
        "Step": "3",
        "StepTitle": "Multi-Way Selection",
        "author": "matthias",
        "ProgrammingLanguage": "Java",
        "ProgrammingParadigm": "imperative",
        "ConceptualAdvantage": "Understand concept of a multi-way selection (a conditional statement where the condition is not just a Boolean value, e.g., a switch-statement).",
        "Form": "Representation",
        "DrawsAttentionTo": "The idea of a multi-way 'selection' in structured programming, where a data (the condition's value) is turned into control flow (the next statement to execute).",
        "UseWhen": "When introducing switch-statements",
        "Cost": "Requires prior introduction of 'Selection'.",
        "OriginSource": "Compilers (control-flow graphs) and flow charts",
        "image": "ControlFlowAsGraph-3-MultiWaySelection.jpg",
        "Mapping:": "ControlFlowAsGraph-3-MultiWaySelection.jpg",
        "...": "...",
        "switch condition": "diamond-shaped node with multiple arrows leaving",
        "switch cases": "label on arrows coming out of a switch (including 'default')",
        "Topic": "ControlFlow",
        "": "ControlFlow",
        "<p>": "ControlFlow",
        "This is the third in a sequence of Control Flow as Graph notional machines:": "ControlFlow",
        "</p>": "ControlFlow",
        "<ol>": "ControlFlow",
        "<li><a href=ControlFlowAsGraph-1-Sequence.html>Sequence</a></li>": "ControlFlow",
        "<li><a href=ControlFlowAsGraph-2-Selection.html>Selection</a></li>": "ControlFlow",
        "<li>Multi-Way Selection</li>": "ControlFlow",
        "<li><a href=ControlFlowAsGraph-4-ShortCircuit.html>Short-Circuit</a></li>": "ControlFlow",
        "<li><a href=ControlFlowAsGraph-5-Repetition.html>Repetition</a></li>": "ControlFlow",
        "</ol>": "ControlFlow",
        "<h3>More Information</h3>": "ControlFlow",
        "This notional machine is implemented by the Informa Clicker tool.": "ControlFlow",
        "This tool allows students in a classroom to construct control flow graphs": "ControlFlow",
        "in in-class clicker exercises.": "ControlFlow",
        "{% include paper.html": "ControlFlow",
        "authors=Matthias Hauswirth and Andrea Adamoli": "ControlFlow",
        "url=https://dl.acm.org/doi/10.1145/1596655.1596657": "ControlFlow",
        "title=Solve & Evaluate with Informa": "A Java-based Classroom Response System for Teaching Java",
        "publication=PPPJ '09 %}": "A Java-based Classroom Response System for Teaching Java",
    },
    "FunctionAsSpreadsheetCell": {
        "title": "Function as Spreadsheet Cell",
        "author": "johan",
        "ProgrammingLanguage": "any",
        "ProgrammingParadigm": "any",
        "ConceptualAdvantage": "The spreadsheet shows how input is transferred to output in several steps. It shows the core of the functionality that students need to implement. It allows students to experiment with changing input and functionality, and it provides students test cases.",
        "Form": "Representation",
        "DrawsAttentionTo": "It shows the students how output depends on input and calculation. It shows the different steps in the calculation.",
        "UseWhen": "This is used when students start implementing their first slightly larger software system (an information retrieval system).",
        "Cost": "Creating such a spreadsheet is usually half a day to a day's work. Students appreciate it, but it involves a different computation paradigm than the programming language the students learn in the course.",
        "OriginSource": "Interview; used by Frans Wiering, source Roelof van Zwol in a course at Utrecht University in 2005.",
        "image": "FunctionAsSpreadsheetCell.jpg",
        "Mapping:": "FunctionAsSpreadsheetCell.jpg",
        "function": "cell transforming input to output",
        "Topic": "Functions",
        "": "Functions",
        "Detailed screenshot of example spreadsheet:": "Functions",
        "<img src=/assets/images/nm/FunctionAsSpreadsheetCell-full.png width=100%>": "Functions",
    },
}
